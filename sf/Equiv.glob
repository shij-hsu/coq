DIGEST 4a16c5d100600f674a70eb02e88f8169
Fsf.Equiv
R53:65 Coq.Bool.Bool <> <> lib
R83:97 Coq.Arith.Arith <> <> lib
R115:129 Coq.Arith.EqNat <> <> lib
R147:161 Coq.omega.Omega <> <> lib
R179:192 Coq.Lists.List <> <> lib
R210:243 Coq.Logic.FunctionalExtensionality <> <> lib
R283:286 sf.Maps <> <> lib
R304:306 sf.Imp <> <> lib
def 2571:2576 <> aequiv
R2587:2590 sf.Imp <> aexp ind
R2616:2620 sf.Imp <> state def
R2639:2641 Coq.Init.Logic <> :type_scope:x_'='_x not
R2628:2632 sf.Imp <> aeval def
R2637:2638 sf.Equiv <> a1 var
R2634:2635 sf.Equiv <> st var
R2642:2646 sf.Imp <> aeval def
R2651:2652 sf.Equiv <> a2 var
R2648:2649 sf.Equiv <> st var
def 2667:2672 <> bequiv
R2683:2686 sf.Imp <> bexp ind
R2712:2716 sf.Imp <> state def
R2735:2737 Coq.Init.Logic <> :type_scope:x_'='_x not
R2724:2728 sf.Imp <> beval def
R2733:2734 sf.Equiv <> b1 var
R2730:2731 sf.Equiv <> st var
R2738:2742 sf.Imp <> beval def
R2747:2748 sf.Equiv <> b2 var
R2744:2745 sf.Equiv <> st var
def 3420:3425 <> cequiv
R3436:3438 sf.Imp <> com ind
R3470:3474 sf.Imp <> state def
R3482:3482 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3497:3503 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3518:3518 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R3485:3487 sf.Imp <> ::x_'/'_x_'\\'_x not
R3490:3493 sf.Imp <> ::x_'/'_x_'\\'_x not
R3483:3484 sf.Equiv <> c1 var
R3488:3489 sf.Equiv <> st var
R3494:3496 sf.Equiv <> st' var
R3506:3508 sf.Imp <> ::x_'/'_x_'\\'_x not
R3511:3514 sf.Imp <> ::x_'/'_x_'\\'_x not
R3504:3505 sf.Equiv <> c2 var
R3509:3510 sf.Equiv <> st var
R3515:3517 sf.Equiv <> st' var
def 4097:4102 <> prog_a
R4106:4108 sf.Imp <> com ind
R4115:4120 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4148:4155 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4184:4189 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4121:4124 sf.Imp <> BNot constr
R4127:4129 sf.Imp <> BLe constr
R4140:4143 sf.Imp <> ANum constr
R4132:4134 sf.Imp <> AId constr
R4136:4136 sf.Imp <> X def
R4157:4161 sf.Imp <> ::x_'::='_x not
R4156:4156 sf.Imp <> X def
R4162:4166 sf.Imp <> APlus constr
R4177:4180 sf.Imp <> ANum constr
R4169:4171 sf.Imp <> AId constr
R4173:4173 sf.Imp <> X def
def 4204:4209 <> prog_b
R4213:4215 sf.Imp <> com ind
R4332:4336 sf.Imp <> ::x_';;'_x not
R4222:4225 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R4246:4255 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R4303:4314 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R4327:4331 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R4226:4228 sf.Imp <> BEq constr
R4239:4242 sf.Imp <> ANum constr
R4231:4233 sf.Imp <> AId constr
R4235:4235 sf.Imp <> X def
R4284:4290 sf.Imp <> ::x_';;'_x not
R4257:4261 sf.Imp <> ::x_'::='_x not
R4256:4256 sf.Imp <> X def
R4262:4266 sf.Imp <> APlus constr
R4277:4280 sf.Imp <> ANum constr
R4269:4271 sf.Imp <> AId constr
R4273:4273 sf.Imp <> X def
R4292:4296 sf.Imp <> ::x_'::='_x not
R4291:4291 sf.Imp <> Y def
R4297:4300 sf.Imp <> ANum constr
R4316:4320 sf.Imp <> ::x_'::='_x not
R4315:4315 sf.Imp <> Y def
R4321:4324 sf.Imp <> ANum constr
R4365:4369 sf.Imp <> ::x_';;'_x not
R4338:4342 sf.Imp <> ::x_'::='_x not
R4337:4337 sf.Imp <> X def
R4343:4348 sf.Imp <> AMinus constr
R4359:4361 sf.Imp <> AId constr
R4363:4363 sf.Imp <> Y def
R4351:4353 sf.Imp <> AId constr
R4355:4355 sf.Imp <> X def
R4371:4375 sf.Imp <> ::x_'::='_x not
R4370:4370 sf.Imp <> Y def
R4376:4379 sf.Imp <> ANum constr
def 4396:4401 <> prog_c
R4405:4407 sf.Imp <> com ind
R4414:4417 sf.Imp <> ::'SKIP' not
def 4432:4437 <> prog_d
R4441:4443 sf.Imp <> com ind
R4450:4455 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4483:4490 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4535:4540 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4456:4459 sf.Imp <> BNot constr
R4462:4464 sf.Imp <> BEq constr
R4475:4478 sf.Imp <> ANum constr
R4467:4469 sf.Imp <> AId constr
R4471:4471 sf.Imp <> X def
R4492:4496 sf.Imp <> ::x_'::='_x not
R4491:4491 sf.Imp <> X def
R4497:4501 sf.Imp <> APlus constr
R4528:4531 sf.Imp <> ANum constr
R4504:4508 sf.Imp <> AMult constr
R4519:4521 sf.Imp <> AId constr
R4523:4523 sf.Imp <> Y def
R4511:4513 sf.Imp <> AId constr
R4515:4515 sf.Imp <> X def
def 4555:4560 <> prog_e
R4564:4566 sf.Imp <> com ind
R4574:4578 sf.Imp <> ::x_'::='_x not
R4573:4573 sf.Imp <> Y def
R4579:4582 sf.Imp <> ANum constr
def 4599:4604 <> prog_f
R4608:4610 sf.Imp <> com ind
R4645:4649 sf.Imp <> ::x_';;'_x not
R4618:4622 sf.Imp <> ::x_'::='_x not
R4617:4617 sf.Imp <> Y def
R4623:4627 sf.Imp <> APlus constr
R4638:4641 sf.Imp <> ANum constr
R4630:4632 sf.Imp <> AId constr
R4634:4634 sf.Imp <> X def
R4650:4655 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4682:4689 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4718:4723 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4656:4659 sf.Imp <> BNot constr
R4662:4664 sf.Imp <> BEq constr
R4675:4677 sf.Imp <> AId constr
R4679:4679 sf.Imp <> Y def
R4667:4669 sf.Imp <> AId constr
R4671:4671 sf.Imp <> X def
R4691:4695 sf.Imp <> ::x_'::='_x not
R4690:4690 sf.Imp <> Y def
R4696:4700 sf.Imp <> APlus constr
R4711:4714 sf.Imp <> ANum constr
R4703:4705 sf.Imp <> AId constr
R4707:4707 sf.Imp <> X def
def 4738:4743 <> prog_g
R4747:4749 sf.Imp <> com ind
R4756:4761 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4767:4774 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4779:4784 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4762:4766 sf.Imp <> BTrue constr
R4775:4778 sf.Imp <> ::'SKIP' not
def 4799:4804 <> prog_h
R4808:4810 sf.Imp <> com ind
R4817:4822 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4849:4856 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4885:4890 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4823:4826 sf.Imp <> BNot constr
R4829:4831 sf.Imp <> BEq constr
R4842:4844 sf.Imp <> AId constr
R4846:4846 sf.Imp <> X def
R4834:4836 sf.Imp <> AId constr
R4838:4838 sf.Imp <> X def
R4858:4862 sf.Imp <> ::x_'::='_x not
R4857:4857 sf.Imp <> X def
R4863:4867 sf.Imp <> APlus constr
R4878:4881 sf.Imp <> ANum constr
R4870:4872 sf.Imp <> AId constr
R4874:4874 sf.Imp <> X def
def 4905:4910 <> prog_i
R4914:4916 sf.Imp <> com ind
R4923:4928 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4955:4962 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4991:4996 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R4929:4932 sf.Imp <> BNot constr
R4935:4937 sf.Imp <> BEq constr
R4948:4950 sf.Imp <> AId constr
R4952:4952 sf.Imp <> Y def
R4940:4942 sf.Imp <> AId constr
R4944:4944 sf.Imp <> X def
R4964:4968 sf.Imp <> ::x_'::='_x not
R4963:4963 sf.Imp <> X def
R4969:4973 sf.Imp <> APlus constr
R4984:4987 sf.Imp <> ANum constr
R4976:4978 sf.Imp <> AId constr
R4980:4980 sf.Imp <> Y def
def 5011:5023 <> equiv_classes
R5027:5030 Coq.Init.Datatypes <> list ind
R5033:5036 Coq.Init.Datatypes <> list ind
R5038:5040 sf.Imp <> com ind
R5048:5048 Coq.Lists.List ListNotations :list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R5064:5064 Coq.Lists.List ListNotations :list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R5073:5073 Coq.Lists.List ListNotations :list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R5082:5082 Coq.Lists.List ListNotations :list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R5091:5091 Coq.Lists.List ListNotations :list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R5114:5114 Coq.Lists.List ListNotations :list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R5123:5123 Coq.Lists.List ListNotations :list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R5049:5049 Coq.Lists.List ListNotations :list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R5056:5056 Coq.Lists.List ListNotations :list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R5063:5063 Coq.Lists.List ListNotations :list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R5050:5055 sf.Equiv <> prog_a def
R5057:5062 sf.Equiv <> prog_d def
R5115:5115 Coq.Lists.List ListNotations :list_scope:'['_x_']' not
R5122:5122 Coq.Lists.List ListNotations :list_scope:'['_x_']' not
R5116:5121 sf.Equiv <> prog_i def
R5092:5092 Coq.Lists.List ListNotations :list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R5099:5099 Coq.Lists.List ListNotations :list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R5106:5106 Coq.Lists.List ListNotations :list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R5113:5113 Coq.Lists.List ListNotations :list_scope:'['_x_';'_x_';'_'..'_';'_x_']' not
R5093:5098 sf.Equiv <> prog_f def
R5107:5112 sf.Equiv <> prog_h def
R5100:5105 sf.Equiv <> prog_g def
R5083:5083 Coq.Lists.List ListNotations :list_scope:'['_x_']' not
R5090:5090 Coq.Lists.List ListNotations :list_scope:'['_x_']' not
R5084:5089 sf.Equiv <> prog_e def
R5074:5074 Coq.Lists.List ListNotations :list_scope:'['_x_']' not
R5081:5081 Coq.Lists.List ListNotations :list_scope:'['_x_']' not
R5075:5080 sf.Equiv <> prog_c def
R5065:5065 Coq.Lists.List ListNotations :list_scope:'['_x_']' not
R5072:5072 Coq.Lists.List ListNotations :list_scope:'['_x_']' not
R5066:5071 sf.Equiv <> prog_b def
prf 5390:5403 <> aequiv_example
R5408:5413 sf.Equiv <> aequiv def
R5441:5444 sf.Imp <> ANum constr
R5416:5421 sf.Imp <> AMinus constr
R5432:5434 sf.Imp <> AId constr
R5436:5436 sf.Imp <> X def
R5424:5426 sf.Imp <> AId constr
R5428:5428 sf.Imp <> X def
prf 5498:5511 <> bequiv_example
R5516:5521 sf.Equiv <> bequiv def
R5563:5567 sf.Imp <> BTrue constr
R5524:5526 sf.Imp <> BEq constr
R5554:5557 sf.Imp <> ANum constr
R5529:5534 sf.Imp <> AMinus constr
R5545:5547 sf.Imp <> AId constr
R5549:5549 sf.Imp <> X def
R5537:5539 sf.Imp <> AId constr
R5541:5541 sf.Imp <> X def
R5597:5601 sf.Imp <> beval def
R5614:5627 sf.Equiv <> aequiv_example thm
R5614:5627 sf.Equiv <> aequiv_example thm
R5614:5627 sf.Equiv <> aequiv_example thm
prf 5787:5795 <> skip_left
R5810:5815 sf.Equiv <> cequiv def
R5838:5838 sf.Equiv <> c var
R5827:5829 sf.Imp <> ::x_';;'_x not
R5823:5826 sf.Imp <> ::'SKIP' not
R5830:5830 sf.Equiv <> c var
R6011:6015 sf.Imp <> E_Seq constr
R6011:6015 sf.Imp <> E_Seq constr
R6036:6041 sf.Imp <> E_Skip constr
R6036:6041 sf.Imp <> E_Skip constr
prf 6206:6215 <> skip_right
R6230:6235 sf.Equiv <> cequiv def
R6257:6257 sf.Equiv <> c var
R6243:6246 sf.Imp <> ::x_';;'_x not
R6242:6242 sf.Equiv <> c var
R6247:6250 sf.Imp <> ::'SKIP' not
R6282:6287 sf.Equiv <> cequiv def
R6388:6392 sf.Imp <> E_Seq constr
R6388:6392 sf.Imp <> E_Seq constr
R6419:6424 sf.Imp <> E_Skip constr
R6419:6424 sf.Imp <> E_Skip constr
prf 6557:6571 <> IFB_true_simple
R6590:6595 sf.Equiv <> cequiv def
R6636:6637 sf.Equiv <> c1 var
R6602:6605 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6611:6616 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6619:6624 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6627:6629 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R6606:6610 sf.Imp <> BTrue constr
R6617:6618 sf.Equiv <> c1 var
R6625:6626 sf.Equiv <> c2 var
R6768:6775 sf.Imp <> E_IfTrue constr
R6768:6775 sf.Imp <> E_IfTrue constr
prf 8686:8693 <> IFB_true
R8731:8740 Coq.Init.Logic <> :type_scope:x_'->'_x not
R8741:8746 sf.Equiv <> cequiv def
R8789:8790 sf.Equiv <> c1 var
R8756:8759 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8761:8766 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8769:8774 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8777:8779 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R8760:8760 sf.Equiv <> b var
R8767:8768 sf.Equiv <> c1 var
R8775:8776 sf.Equiv <> c2 var
R8717:8722 sf.Equiv <> bequiv def
R8726:8730 sf.Imp <> BTrue constr
R8724:8724 sf.Equiv <> b var
R8989:8994 sf.Equiv <> bequiv def
R9083:9090 sf.Imp <> E_IfTrue constr
R9083:9090 sf.Imp <> E_IfTrue constr
R9120:9125 sf.Equiv <> bequiv def
prf 9247:9255 <> IFB_false
R9291:9297 Coq.Init.Logic <> :type_scope:x_'->'_x not
R9298:9303 sf.Equiv <> cequiv def
R9340:9341 sf.Equiv <> c2 var
R9310:9313 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9315:9320 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9323:9328 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9331:9333 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9314:9314 sf.Equiv <> b var
R9321:9322 sf.Equiv <> c1 var
R9329:9330 sf.Equiv <> c2 var
R9276:9281 sf.Equiv <> bequiv def
R9285:9290 sf.Imp <> BFalse constr
R9283:9283 sf.Equiv <> b var
R9366:9371 sf.Equiv <> bequiv def
R9386:9391 sf.Equiv <> cequiv def
R9539:9547 sf.Imp <> E_IfFalse constr
R9539:9547 sf.Imp <> E_IfFalse constr
prf 9749:9764 <> swap_if_branches
R9785:9790 sf.Equiv <> cequiv def
R9828:9831 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9838:9843 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9846:9851 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9854:9856 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9832:9835 sf.Imp <> BNot constr
R9837:9837 sf.Equiv <> b var
R9844:9845 sf.Equiv <> e2 var
R9852:9853 sf.Equiv <> e1 var
R9797:9800 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9802:9807 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9810:9815 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9818:9820 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R9801:9801 sf.Equiv <> b var
R9808:9809 sf.Equiv <> e1 var
R9816:9817 sf.Equiv <> e2 var
R9882:9887 sf.Equiv <> cequiv def
R9944:9952 sf.Imp <> E_IfFalse constr
R9944:9952 sf.Imp <> E_IfFalse constr
R10020:10027 sf.Imp <> E_IfTrue constr
R10020:10027 sf.Imp <> E_IfTrue constr
R10116:10124 sf.Imp <> E_IfFalse constr
R10116:10124 sf.Imp <> E_IfFalse constr
R10162:10164 Coq.Init.Logic <> :type_scope:x_'='_x not
R10152:10156 sf.Imp <> beval def
R10165:10168 Coq.Init.Datatypes <> negb def
R10170:10173 Coq.Init.Datatypes <> true constr
R10162:10164 Coq.Init.Logic <> :type_scope:x_'='_x not
R10152:10156 sf.Imp <> beval def
R10165:10168 Coq.Init.Datatypes <> negb def
R10170:10173 Coq.Init.Datatypes <> true constr
R10190:10197 Coq.Bool.Bool <> negb_sym thm
R10190:10197 Coq.Bool.Bool <> negb_sym thm
R10297:10304 sf.Imp <> E_IfTrue constr
R10297:10304 sf.Imp <> E_IfTrue constr
R10372:10379 sf.Imp <> E_IfTrue constr
R10372:10379 sf.Imp <> E_IfTrue constr
R10412:10413 Coq.Init.Logic <> :type_scope:x_'='_x not
R10402:10406 sf.Imp <> beval def
R10414:10417 Coq.Init.Datatypes <> negb def
R10419:10423 Coq.Init.Datatypes <> false constr
R10412:10413 Coq.Init.Logic <> :type_scope:x_'='_x not
R10402:10406 sf.Imp <> beval def
R10414:10417 Coq.Init.Datatypes <> negb def
R10419:10423 Coq.Init.Datatypes <> false constr
R10440:10447 Coq.Bool.Bool <> negb_sym thm
R10440:10447 Coq.Bool.Bool <> negb_sym thm
prf 10875:10885 <> WHILE_false
R10921:10929 Coq.Init.Logic <> :type_scope:x_'->'_x not
R10930:10935 sf.Equiv <> cequiv def
R10970:10973 sf.Imp <> ::'SKIP' not
R10945:10950 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10952:10955 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10957:10960 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R10951:10951 sf.Equiv <> b var
R10956:10956 sf.Equiv <> c var
R10906:10911 sf.Equiv <> bequiv def
R10915:10920 sf.Imp <> BFalse constr
R10913:10913 sf.Equiv <> b var
R11089:11094 sf.Imp <> E_Skip constr
R11089:11094 sf.Imp <> E_Skip constr
R11206:11215 sf.Imp <> E_WhileEnd constr
R11206:11215 sf.Imp <> E_WhileEnd constr
prf 12543:12560 <> WHILE_true_nonterm
R12602:12610 Coq.Init.Logic <> :type_scope:x_'->'_x not
R12611:12613 Coq.Init.Logic <> :type_scope:'~'_x not
R12644:12645 Coq.Init.Logic <> :type_scope:'~'_x not
R12614:12614 sf.Imp <> ::x_'/'_x_'\\'_x not
R12631:12634 sf.Imp <> ::x_'/'_x_'\\'_x not
R12637:12640 sf.Imp <> ::x_'/'_x_'\\'_x not
R12615:12620 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12622:12625 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12627:12630 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12621:12621 sf.Equiv <> b var
R12626:12626 sf.Equiv <> c var
R12635:12636 sf.Equiv <> st var
R12641:12643 sf.Equiv <> st' var
R12588:12593 sf.Equiv <> bequiv def
R12597:12601 sf.Imp <> BTrue constr
R12595:12595 sf.Equiv <> b var
R12727:12732 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12734:12737 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12739:12742 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12727:12732 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12734:12737 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R12739:12742 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13034:13039 sf.Equiv <> bequiv def
prf 13569:13578 <> WHILE_true
R13612:13621 Coq.Init.Logic <> :type_scope:x_'->'_x not
R13622:13627 sf.Equiv <> cequiv def
R13663:13668 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13674:13677 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13682:13685 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13669:13673 sf.Imp <> BTrue constr
R13678:13681 sf.Imp <> ::'SKIP' not
R13637:13642 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13644:13647 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13649:13652 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R13643:13643 sf.Equiv <> b var
R13648:13648 sf.Equiv <> c var
R13598:13603 sf.Equiv <> bequiv def
R13607:13611 sf.Imp <> BTrue constr
R13605:13605 sf.Equiv <> b var
R13711:13716 sf.Equiv <> cequiv def
R13757:13774 sf.Equiv <> WHILE_true_nonterm thm
R13757:13774 sf.Equiv <> WHILE_true_nonterm thm
R13833:13837 Coq.Init.Logic <> False ind
R13833:13837 Coq.Init.Logic <> False ind
R13847:13864 sf.Equiv <> WHILE_true_nonterm thm
R13872:13875 sf.Imp <> ::'SKIP' not
R13866:13870 sf.Imp <> BTrue constr
R13847:13864 sf.Equiv <> WHILE_true_nonterm thm
R13872:13875 sf.Imp <> ::'SKIP' not
R13866:13870 sf.Imp <> BTrue constr
R13894:13899 sf.Equiv <> bequiv def
prf 14004:14017 <> loop_unrolling
R14034:14039 sf.Equiv <> cequiv def
R14069:14072 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R14074:14080 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R14101:14107 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R14112:14114 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R14073:14073 sf.Equiv <> b var
R14082:14084 sf.Imp <> ::x_';;'_x not
R14081:14081 sf.Equiv <> c var
R14085:14090 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R14092:14095 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R14097:14100 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R14091:14091 sf.Equiv <> b var
R14096:14096 sf.Equiv <> c var
R14108:14111 sf.Imp <> ::'SKIP' not
R14046:14051 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R14053:14056 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R14058:14061 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R14052:14052 sf.Equiv <> b var
R14057:14057 sf.Equiv <> c var
R14271:14279 sf.Imp <> E_IfFalse constr
R14271:14279 sf.Imp <> E_IfFalse constr
R14300:14305 sf.Imp <> E_Skip constr
R14300:14305 sf.Imp <> E_Skip constr
R14342:14349 sf.Imp <> E_IfTrue constr
R14342:14349 sf.Imp <> E_IfTrue constr
R14376:14380 sf.Imp <> E_Seq constr
R14376:14380 sf.Imp <> E_Seq constr
R14526:14536 sf.Imp <> E_WhileLoop constr
R14526:14536 sf.Imp <> E_WhileLoop constr
R14662:14671 sf.Imp <> E_WhileEnd constr
R14662:14671 sf.Imp <> E_WhileEnd constr
prf 14754:14762 <> seq_assoc
R14785:14790 sf.Equiv <> cequiv def
R14810:14812 sf.Imp <> ::x_';;'_x not
R14819:14819 sf.Imp <> ::x_';;'_x not
R14808:14809 sf.Equiv <> c1 var
R14815:14816 sf.Imp <> ::x_';;'_x not
R14813:14814 sf.Equiv <> c2 var
R14817:14818 sf.Equiv <> c3 var
R14793:14793 sf.Imp <> ::x_';;'_x not
R14800:14802 sf.Imp <> ::x_';;'_x not
R14796:14797 sf.Imp <> ::x_';;'_x not
R14794:14795 sf.Equiv <> c1 var
R14798:14799 sf.Equiv <> c2 var
R14803:14804 sf.Equiv <> c3 var
R14845:14850 sf.Equiv <> cequiv def
R14936:14940 sf.Imp <> E_Seq constr
R14936:14940 sf.Imp <> E_Seq constr
R14969:14973 sf.Imp <> E_Seq constr
R14969:14973 sf.Imp <> E_Seq constr
R15076:15080 sf.Imp <> E_Seq constr
R15076:15080 sf.Imp <> E_Seq constr
R15099:15103 sf.Imp <> E_Seq constr
R15099:15103 sf.Imp <> E_Seq constr
prf 15409:15427 <> identity_assignment
R15441:15442 sf.Maps <> id ind
R15448:15453 sf.Equiv <> cequiv def
R15477:15480 sf.Imp <> ::'SKIP' not
R15461:15465 sf.Imp <> ::x_'::='_x not
R15460:15460 sf.Equiv <> X var
R15466:15468 sf.Imp <> AId constr
R15470:15470 sf.Equiv <> X var
R15583:15590 sf.Maps <> t_update def
R15583:15590 sf.Maps <> t_update def
R15651:15675 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R15651:15675 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R15702:15714 sf.Maps <> t_update_same thm
R15702:15714 sf.Maps <> t_update_same thm
R15702:15714 sf.Maps <> t_update_same thm
R15771:15778 sf.Maps <> t_update def
R15787:15791 sf.Imp <> aeval def
R15798:15800 sf.Imp <> AId constr
R15771:15778 sf.Maps <> t_update def
R15787:15791 sf.Imp <> aeval def
R15798:15800 sf.Imp <> AId constr
R15843:15847 sf.Imp <> E_Ass constr
R15843:15847 sf.Imp <> E_Ass constr
R15878:15902 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R15878:15902 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R15929:15941 sf.Maps <> t_update_same thm
R15929:15941 sf.Maps <> t_update_same thm
R15929:15941 sf.Maps <> t_update_same thm
prf 16031:16043 <> assign_aequiv
R16077:16082 Coq.Init.Logic <> :type_scope:x_'->'_x not
R16083:16088 sf.Equiv <> cequiv def
R16097:16101 sf.Imp <> ::x_'::='_x not
R16096:16096 sf.Equiv <> X var
R16102:16102 sf.Equiv <> e var
R16090:16093 sf.Imp <> ::'SKIP' not
R16061:16066 sf.Equiv <> aequiv def
R16076:16076 sf.Equiv <> e var
R16069:16071 sf.Imp <> AId constr
R16073:16073 sf.Equiv <> X var
R16128:16133 sf.Equiv <> cequiv def
R16163:16168 sf.Equiv <> aequiv def
R16253:16253 Coq.Init.Logic <> :type_scope:x_'='_x not
R16231:16238 sf.Maps <> t_update def
R16253:16253 Coq.Init.Logic <> :type_scope:x_'='_x not
R16231:16238 sf.Maps <> t_update def
R16274:16281 sf.Maps <> t_update def
R16290:16314 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R16290:16314 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R16342:16356 sf.Maps <> beq_id_true_iff thm
R16342:16356 sf.Maps <> beq_id_true_iff thm
R16381:16386 sf.Maps <> beq_id def
R16381:16386 sf.Maps <> beq_id def
R16506:16510 sf.Imp <> E_Ass constr
R16506:16510 sf.Imp <> E_Ass constr
R16575:16580 sf.Equiv <> aequiv def
R16665:16665 Coq.Init.Logic <> :type_scope:x_'='_x not
R16639:16646 sf.Maps <> t_update def
R16654:16658 sf.Imp <> aeval def
R16665:16665 Coq.Init.Logic <> :type_scope:x_'='_x not
R16639:16646 sf.Maps <> t_update def
R16654:16658 sf.Imp <> aeval def
R16685:16692 sf.Maps <> t_update def
R16701:16725 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R16701:16725 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R16753:16767 sf.Maps <> beq_id_true_iff thm
R16753:16767 sf.Maps <> beq_id_true_iff thm
R16792:16797 sf.Maps <> beq_id def
R16792:16797 sf.Maps <> beq_id def
R16913:16918 sf.Imp <> E_Skip constr
R16913:16918 sf.Imp <> E_Skip constr
prf 17513:17523 <> refl_aequiv
R17539:17542 sf.Imp <> aexp ind
R17546:17551 sf.Equiv <> aequiv def
R17555:17555 sf.Equiv <> a var
R17553:17553 sf.Equiv <> a var
prf 17606:17615 <> sym_aequiv
R17635:17638 sf.Imp <> aexp ind
R17656:17659 Coq.Init.Logic <> :type_scope:x_'->'_x not
R17660:17665 sf.Equiv <> aequiv def
R17670:17671 sf.Equiv <> a1 var
R17667:17668 sf.Equiv <> a2 var
R17644:17649 sf.Equiv <> aequiv def
R17654:17655 sf.Equiv <> a2 var
R17651:17652 sf.Equiv <> a1 var
prf 17742:17753 <> trans_aequiv
R17776:17779 sf.Imp <> aexp ind
R17797:17800 Coq.Init.Logic <> :type_scope:x_'->'_x not
R17813:17816 Coq.Init.Logic <> :type_scope:x_'->'_x not
R17817:17822 sf.Equiv <> aequiv def
R17827:17828 sf.Equiv <> a3 var
R17824:17825 sf.Equiv <> a1 var
R17801:17806 sf.Equiv <> aequiv def
R17811:17812 sf.Equiv <> a3 var
R17808:17809 sf.Equiv <> a2 var
R17785:17790 sf.Equiv <> aequiv def
R17795:17796 sf.Equiv <> a2 var
R17792:17793 sf.Equiv <> a1 var
R17847:17852 sf.Equiv <> aequiv def
prf 17947:17957 <> refl_bequiv
R17973:17976 sf.Imp <> bexp ind
R17980:17985 sf.Equiv <> bequiv def
R17989:17989 sf.Equiv <> b var
R17987:17987 sf.Equiv <> b var
R18008:18013 sf.Equiv <> bequiv def
prf 18055:18064 <> sym_bequiv
R18084:18087 sf.Imp <> bexp ind
R18105:18108 Coq.Init.Logic <> :type_scope:x_'->'_x not
R18109:18114 sf.Equiv <> bequiv def
R18119:18120 sf.Equiv <> b1 var
R18116:18117 sf.Equiv <> b2 var
R18093:18098 sf.Equiv <> bequiv def
R18103:18104 sf.Equiv <> b2 var
R18100:18101 sf.Equiv <> b1 var
R18139:18144 sf.Equiv <> bequiv def
prf 18206:18217 <> trans_bequiv
R18240:18243 sf.Imp <> bexp ind
R18261:18264 Coq.Init.Logic <> :type_scope:x_'->'_x not
R18277:18280 Coq.Init.Logic <> :type_scope:x_'->'_x not
R18281:18286 sf.Equiv <> bequiv def
R18291:18292 sf.Equiv <> b3 var
R18288:18289 sf.Equiv <> b1 var
R18265:18270 sf.Equiv <> bequiv def
R18275:18276 sf.Equiv <> b3 var
R18272:18273 sf.Equiv <> b2 var
R18249:18254 sf.Equiv <> bequiv def
R18259:18260 sf.Equiv <> b2 var
R18256:18257 sf.Equiv <> b1 var
R18311:18316 sf.Equiv <> bequiv def
prf 18411:18421 <> refl_cequiv
R18437:18439 sf.Imp <> com ind
R18443:18448 sf.Equiv <> cequiv def
R18452:18452 sf.Equiv <> c var
R18450:18450 sf.Equiv <> c var
R18471:18476 sf.Equiv <> cequiv def
R18502:18509 Coq.Init.Logic <> iff_refl thm
R18502:18509 Coq.Init.Logic <> iff_refl thm
prf 18525:18534 <> sym_cequiv
R18554:18556 sf.Imp <> com ind
R18574:18577 Coq.Init.Logic <> :type_scope:x_'->'_x not
R18578:18583 sf.Equiv <> cequiv def
R18588:18589 sf.Equiv <> c1 var
R18585:18586 sf.Equiv <> c2 var
R18562:18567 sf.Equiv <> cequiv def
R18572:18573 sf.Equiv <> c2 var
R18569:18570 sf.Equiv <> c1 var
R18608:18613 sf.Equiv <> cequiv def
R18663:18667 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R18651:18653 sf.Imp <> ::x_'/'_x_'\\'_x not
R18656:18659 sf.Imp <> ::x_'/'_x_'\\'_x not
R18670:18672 sf.Imp <> ::x_'/'_x_'\\'_x not
R18675:18678 sf.Imp <> ::x_'/'_x_'\\'_x not
R18663:18667 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R18651:18653 sf.Imp <> ::x_'/'_x_'\\'_x not
R18656:18659 sf.Imp <> ::x_'/'_x_'\\'_x not
R18670:18672 sf.Imp <> ::x_'/'_x_'\\'_x not
R18675:18678 sf.Imp <> ::x_'/'_x_'\\'_x not
R18739:18745 Coq.Init.Logic <> iff_sym thm
R18739:18745 Coq.Init.Logic <> iff_sym thm
prf 18772:18780 <> iff_trans
R18812:18812 Coq.Init.Logic <> :type_scope:x_'->'_x not
R18822:18826 Coq.Init.Logic <> :type_scope:x_'->'_x not
R18827:18827 Coq.Init.Logic <> :type_scope:x_'->'_x not
R18837:18842 Coq.Init.Logic <> :type_scope:x_'->'_x not
R18852:18852 Coq.Init.Logic <> :type_scope:x_'->'_x not
R18845:18849 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R18843:18844 sf.Equiv <> P1 var
R18850:18851 sf.Equiv <> P3 var
R18830:18834 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R18828:18829 sf.Equiv <> P2 var
R18835:18836 sf.Equiv <> P3 var
R18815:18819 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R18813:18814 sf.Equiv <> P1 var
R18820:18821 sf.Equiv <> P2 var
prf 19018:19029 <> trans_cequiv
R19052:19054 sf.Imp <> com ind
R19072:19075 Coq.Init.Logic <> :type_scope:x_'->'_x not
R19088:19091 Coq.Init.Logic <> :type_scope:x_'->'_x not
R19092:19097 sf.Equiv <> cequiv def
R19102:19103 sf.Equiv <> c3 var
R19099:19100 sf.Equiv <> c1 var
R19076:19081 sf.Equiv <> cequiv def
R19086:19087 sf.Equiv <> c3 var
R19083:19084 sf.Equiv <> c2 var
R19060:19065 sf.Equiv <> cequiv def
R19070:19071 sf.Equiv <> c2 var
R19067:19068 sf.Equiv <> c1 var
R19122:19127 sf.Equiv <> cequiv def
R19188:19190 sf.Imp <> ::x_'/'_x_'\\'_x not
R19193:19196 sf.Imp <> ::x_'/'_x_'\\'_x not
R19170:19178 sf.Equiv <> iff_trans thm
R19188:19190 sf.Imp <> ::x_'/'_x_'\\'_x not
R19193:19196 sf.Imp <> ::x_'/'_x_'\\'_x not
R19170:19178 sf.Equiv <> iff_trans thm
prf 20590:20604 <> CAss_congruence
R20640:20645 Coq.Init.Logic <> :type_scope:x_'->'_x not
R20646:20651 sf.Equiv <> cequiv def
R20666:20669 sf.Imp <> CAss constr
R20673:20675 sf.Equiv <> a1' var
R20671:20671 sf.Equiv <> i var
R20654:20657 sf.Imp <> CAss constr
R20661:20662 sf.Equiv <> a1 var
R20659:20659 sf.Equiv <> i var
R20627:20632 sf.Equiv <> aequiv def
R20637:20639 sf.Equiv <> a1' var
R20634:20635 sf.Equiv <> a1 var
R20788:20792 sf.Imp <> E_Ass constr
R20788:20792 sf.Imp <> E_Ass constr
R20874:20878 sf.Imp <> E_Ass constr
R20874:20878 sf.Imp <> E_Ass constr
prf 22730:22746 <> CWhile_congruence
R22787:22790 Coq.Init.Logic <> :type_scope:x_'->'_x not
R22804:22809 Coq.Init.Logic <> :type_scope:x_'->'_x not
R22810:22815 sf.Equiv <> cequiv def
R22839:22844 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22848:22851 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22855:22858 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22845:22847 sf.Equiv <> b1' var
R22852:22854 sf.Equiv <> c1' var
R22818:22823 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22826:22829 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22832:22835 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R22824:22825 sf.Equiv <> b1 var
R22830:22831 sf.Equiv <> c1 var
R22791:22796 sf.Equiv <> cequiv def
R22801:22803 sf.Equiv <> c1' var
R22798:22799 sf.Equiv <> c1 var
R22774:22779 sf.Equiv <> bequiv def
R22784:22786 sf.Equiv <> b1' var
R22781:22782 sf.Equiv <> b1 var
R22902:22907 sf.Equiv <> bequiv def
R22909:22914 sf.Equiv <> cequiv def
R23006:23011 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23014:23017 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23020:23023 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23006:23011 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23014:23017 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23020:23023 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23139:23148 sf.Imp <> E_WhileEnd constr
R23139:23148 sf.Imp <> E_WhileEnd constr
R23213:23223 sf.Imp <> E_WhileLoop constr
R23213:23223 sf.Imp <> E_WhileLoop constr
R23472:23477 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23481:23484 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23488:23491 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23472:23477 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23481:23484 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23488:23491 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R23610:23619 sf.Imp <> E_WhileEnd constr
R23610:23619 sf.Imp <> E_WhileEnd constr
R23684:23694 sf.Imp <> E_WhileLoop constr
R23684:23694 sf.Imp <> E_WhileLoop constr
prf 23990:24004 <> CSeq_congruence
R24045:24048 Coq.Init.Logic <> :type_scope:x_'->'_x not
R24062:24067 Coq.Init.Logic <> :type_scope:x_'->'_x not
R24068:24073 sf.Equiv <> cequiv def
R24088:24089 sf.Imp <> ::x_';;'_x not
R24085:24087 sf.Equiv <> c1' var
R24090:24092 sf.Equiv <> c2' var
R24078:24079 sf.Imp <> ::x_';;'_x not
R24076:24077 sf.Equiv <> c1 var
R24080:24081 sf.Equiv <> c2 var
R24049:24054 sf.Equiv <> cequiv def
R24059:24061 sf.Equiv <> c2' var
R24056:24057 sf.Equiv <> c2 var
R24032:24037 sf.Equiv <> cequiv def
R24042:24044 sf.Equiv <> c1' var
R24039:24040 sf.Equiv <> c1 var
R24118:24123 sf.Equiv <> cequiv def
R24179:24183 sf.Imp <> E_Seq constr
R24179:24183 sf.Imp <> E_Seq constr
R24313:24317 sf.Imp <> E_Seq constr
R24313:24317 sf.Imp <> E_Seq constr
prf 24507:24520 <> CIf_congruence
R24564:24567 Coq.Init.Logic <> :type_scope:x_'->'_x not
R24581:24584 Coq.Init.Logic <> :type_scope:x_'->'_x not
R24598:24603 Coq.Init.Logic <> :type_scope:x_'->'_x not
R24604:24609 sf.Equiv <> cequiv def
R24648:24651 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24654:24659 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24663:24668 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24672:24674 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24652:24653 sf.Equiv <> b' var
R24660:24662 sf.Equiv <> c1' var
R24669:24671 sf.Equiv <> c2' var
R24612:24615 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24617:24622 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24625:24630 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24633:24635 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R24616:24616 sf.Equiv <> b var
R24623:24624 sf.Equiv <> c1 var
R24631:24632 sf.Equiv <> c2 var
R24585:24590 sf.Equiv <> cequiv def
R24595:24597 sf.Equiv <> c2' var
R24592:24593 sf.Equiv <> c2 var
R24568:24573 sf.Equiv <> cequiv def
R24578:24580 sf.Equiv <> c1' var
R24575:24576 sf.Equiv <> c1 var
R24553:24558 sf.Equiv <> bequiv def
R24562:24563 sf.Equiv <> b' var
R24560:24560 sf.Equiv <> b var
R24700:24705 sf.Equiv <> cequiv def
R24720:24725 sf.Equiv <> bequiv def
R24789:24796 sf.Imp <> E_IfTrue constr
R24789:24796 sf.Imp <> E_IfTrue constr
R24876:24884 sf.Imp <> E_IfFalse constr
R24876:24884 sf.Imp <> E_IfFalse constr
R24986:24993 sf.Imp <> E_IfTrue constr
R24986:24993 sf.Imp <> E_IfTrue constr
R25076:25084 sf.Imp <> E_IfFalse constr
R25076:25084 sf.Imp <> E_IfFalse constr
def 25282:25299 <> congruence_example
R25304:25309 sf.Equiv <> cequiv def
R25492:25499 sf.Imp <> ::x_';;'_x not
R25481:25485 sf.Imp <> ::x_'::='_x not
R25480:25480 sf.Imp <> X def
R25486:25489 sf.Imp <> ANum constr
R25500:25504 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25525:25543 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25572:25615 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25629:25636 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25505:25507 sf.Imp <> BEq constr
R25518:25521 sf.Imp <> ANum constr
R25510:25512 sf.Imp <> AId constr
R25514:25514 sf.Imp <> X def
R25545:25549 sf.Imp <> ::x_'::='_x not
R25544:25544 sf.Imp <> Y def
R25550:25555 sf.Imp <> AMinus constr
R25566:25568 sf.Imp <> AId constr
R25570:25570 sf.Imp <> X def
R25558:25560 sf.Imp <> AId constr
R25562:25562 sf.Imp <> X def
R25617:25621 sf.Imp <> ::x_'::='_x not
R25616:25616 sf.Imp <> Y def
R25622:25625 sf.Imp <> ANum constr
R25349:25356 sf.Imp <> ::x_';;'_x not
R25338:25342 sf.Imp <> ::x_'::='_x not
R25337:25337 sf.Imp <> X def
R25343:25346 sf.Imp <> ANum constr
R25357:25361 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25382:25400 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25413:25430 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25444:25451 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R25362:25364 sf.Imp <> BEq constr
R25375:25378 sf.Imp <> ANum constr
R25367:25369 sf.Imp <> AId constr
R25371:25371 sf.Imp <> X def
R25402:25406 sf.Imp <> ::x_'::='_x not
R25401:25401 sf.Imp <> Y def
R25407:25410 sf.Imp <> ANum constr
R25432:25436 sf.Imp <> ::x_'::='_x not
R25431:25431 sf.Imp <> Y def
R25437:25440 sf.Imp <> ANum constr
R25655:25669 sf.Equiv <> CSeq_congruence thm
R25655:25669 sf.Equiv <> CSeq_congruence thm
R25682:25692 sf.Equiv <> refl_cequiv thm
R25682:25692 sf.Equiv <> refl_cequiv thm
R25705:25718 sf.Equiv <> CIf_congruence thm
R25705:25718 sf.Equiv <> CIf_congruence thm
R25733:25743 sf.Equiv <> refl_bequiv thm
R25733:25743 sf.Equiv <> refl_bequiv thm
R25758:25772 sf.Equiv <> CAss_congruence thm
R25758:25772 sf.Equiv <> CAss_congruence thm
R25782:25787 sf.Equiv <> aequiv def
R25821:25830 Coq.Arith.Minus <> minus_diag syndef
R25821:25830 Coq.Arith.Minus <> minus_diag syndef
R25845:25855 sf.Equiv <> refl_cequiv thm
R25845:25855 sf.Equiv <> refl_cequiv thm
def 26326:26337 <> atrans_sound
R26353:26356 Coq.Init.Logic <> :type_scope:x_'->'_x not
R26357:26360 sf.Imp <> aexp ind
R26349:26352 sf.Imp <> aexp ind
R26387:26390 sf.Imp <> aexp ind
R26398:26403 sf.Equiv <> aequiv def
R26408:26413 sf.Equiv <> atrans var
R26415:26415 sf.Equiv <> a var
R26405:26405 sf.Equiv <> a var
def 26431:26442 <> btrans_sound
R26458:26461 Coq.Init.Logic <> :type_scope:x_'->'_x not
R26462:26465 sf.Imp <> bexp ind
R26454:26457 sf.Imp <> bexp ind
R26492:26495 sf.Imp <> bexp ind
R26503:26508 sf.Equiv <> bequiv def
R26513:26518 sf.Equiv <> btrans var
R26520:26520 sf.Equiv <> b var
R26510:26510 sf.Equiv <> b var
def 26536:26547 <> ctrans_sound
R26562:26565 Coq.Init.Logic <> :type_scope:x_'->'_x not
R26566:26568 sf.Imp <> com ind
R26559:26561 sf.Imp <> com ind
R26595:26597 sf.Imp <> com ind
R26605:26610 sf.Equiv <> cequiv def
R26615:26620 sf.Equiv <> ctrans var
R26622:26622 sf.Equiv <> c var
R26612:26612 sf.Equiv <> c var
def 26948:26966 <> fold_constants_aexp
R26973:26976 sf.Imp <> aexp ind
R26981:26984 sf.Imp <> aexp ind
R26997:26997 sf.Equiv <> a var
R27008:27011 sf.Imp <> ANum constr
R27024:27027 sf.Imp <> ANum constr
R27035:27037 sf.Imp <> AId constr
R27051:27053 sf.Imp <> AId constr
R27061:27065 sf.Imp <> APlus constr
R27087:27087 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27110:27111 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27134:27134 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27088:27106 sf.Equiv <> fold_constants_aexp def
R27112:27130 sf.Equiv <> fold_constants_aexp def
R27151:27151 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27159:27160 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27168:27168 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27152:27155 sf.Imp <> ANum constr
R27161:27164 sf.Imp <> ANum constr
R27173:27176 sf.Imp <> ANum constr
R27181:27183 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R27194:27194 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27198:27199 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27203:27203 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27208:27212 sf.Imp <> APlus constr
R27234:27239 sf.Imp <> AMinus constr
R27260:27260 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27283:27284 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27307:27307 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27261:27279 sf.Equiv <> fold_constants_aexp def
R27285:27303 sf.Equiv <> fold_constants_aexp def
R27324:27324 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27332:27333 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27341:27341 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27325:27328 sf.Imp <> ANum constr
R27334:27337 sf.Imp <> ANum constr
R27346:27349 sf.Imp <> ANum constr
R27354:27356 Coq.Init.Peano <> :nat_scope:x_'-'_x not
R27367:27367 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27371:27372 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27376:27376 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27381:27386 sf.Imp <> AMinus constr
R27408:27412 sf.Imp <> AMult constr
R27434:27434 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27457:27458 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27481:27481 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27435:27453 sf.Equiv <> fold_constants_aexp def
R27459:27477 sf.Equiv <> fold_constants_aexp def
R27498:27498 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27506:27507 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27515:27515 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27499:27502 sf.Imp <> ANum constr
R27508:27511 sf.Imp <> ANum constr
R27520:27523 sf.Imp <> ANum constr
R27528:27530 Coq.Init.Peano <> :nat_scope:x_'*'_x not
R27541:27541 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27545:27546 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27550:27550 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R27555:27559 sf.Imp <> AMult constr
def 27593:27605 <> fold_aexp_ex1
R27680:27684 Coq.Init.Logic <> :type_scope:x_'='_x not
R27613:27631 sf.Equiv <> fold_constants_aexp def
R27640:27644 sf.Imp <> AMult constr
R27673:27675 sf.Imp <> AId constr
R27677:27677 sf.Imp <> X def
R27647:27651 sf.Imp <> APlus constr
R27663:27666 sf.Imp <> ANum constr
R27654:27657 sf.Imp <> ANum constr
R27685:27689 sf.Imp <> AMult constr
R27701:27703 sf.Imp <> AId constr
R27705:27705 sf.Imp <> X def
R27692:27695 sf.Imp <> ANum constr
def 28048:28060 <> fold_aexp_ex2
R28181:28185 Coq.Init.Logic <> :type_scope:x_'='_x not
R28068:28086 sf.Equiv <> fold_constants_aexp def
R28095:28100 sf.Imp <> AMinus constr
R28111:28115 sf.Imp <> APlus constr
R28173:28175 sf.Imp <> AId constr
R28177:28177 sf.Imp <> Y def
R28118:28122 sf.Imp <> AMult constr
R28134:28137 sf.Imp <> ANum constr
R28125:28128 sf.Imp <> ANum constr
R28103:28105 sf.Imp <> AId constr
R28107:28107 sf.Imp <> X def
R28186:28191 sf.Imp <> AMinus constr
R28202:28206 sf.Imp <> APlus constr
R28218:28220 sf.Imp <> AId constr
R28222:28222 sf.Imp <> Y def
R28209:28212 sf.Imp <> ANum constr
R28194:28196 sf.Imp <> AId constr
R28198:28198 sf.Imp <> X def
def 28440:28458 <> fold_constants_bexp
R28465:28468 sf.Imp <> bexp ind
R28473:28476 sf.Imp <> bexp ind
R28489:28489 sf.Equiv <> b var
R28500:28504 sf.Imp <> BTrue constr
R28516:28520 sf.Imp <> BTrue constr
R28526:28531 sf.Imp <> BFalse constr
R28542:28547 sf.Imp <> BFalse constr
R28553:28555 sf.Imp <> BEq constr
R28577:28577 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28600:28601 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28624:28624 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28578:28596 sf.Equiv <> fold_constants_aexp def
R28602:28620 sf.Equiv <> fold_constants_aexp def
R28641:28641 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28649:28650 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28658:28658 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28642:28645 sf.Imp <> ANum constr
R28651:28654 sf.Imp <> ANum constr
R28674:28680 Coq.Arith.EqNat <> beq_nat syndef
R28704:28709 sf.Imp <> BFalse constr
R28693:28697 sf.Imp <> BTrue constr
R28717:28717 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28721:28722 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28726:28726 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28739:28741 sf.Imp <> BEq constr
R28763:28765 sf.Imp <> BLe constr
R28787:28787 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28810:28811 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28834:28834 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28788:28806 sf.Equiv <> fold_constants_aexp def
R28812:28830 sf.Equiv <> fold_constants_aexp def
R28851:28851 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28859:28860 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28868:28868 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28852:28855 sf.Imp <> ANum constr
R28861:28864 sf.Imp <> ANum constr
R28884:28886 Coq.Arith.Compare_dec <> leb syndef
R28910:28915 sf.Imp <> BFalse constr
R28899:28903 sf.Imp <> BTrue constr
R28923:28923 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28927:28928 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28932:28932 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R28945:28947 sf.Imp <> BLe constr
R28969:28972 sf.Imp <> BNot constr
R28992:29010 sf.Equiv <> fold_constants_bexp def
R29027:29031 sf.Imp <> BTrue constr
R29036:29041 sf.Imp <> BFalse constr
R29049:29054 sf.Imp <> BFalse constr
R29059:29063 sf.Imp <> BTrue constr
R29078:29081 sf.Imp <> BNot constr
R29099:29102 sf.Imp <> BAnd constr
R29124:29124 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29147:29148 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29171:29171 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29125:29143 sf.Equiv <> fold_constants_bexp def
R29149:29167 sf.Equiv <> fold_constants_bexp def
R29188:29188 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29194:29195 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29201:29201 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29189:29193 sf.Imp <> BTrue constr
R29196:29200 sf.Imp <> BTrue constr
R29206:29210 sf.Imp <> BTrue constr
R29218:29218 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29224:29225 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29232:29232 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29219:29223 sf.Imp <> BTrue constr
R29226:29231 sf.Imp <> BFalse constr
R29237:29242 sf.Imp <> BFalse constr
R29250:29250 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29257:29258 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29264:29264 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29251:29256 sf.Imp <> BFalse constr
R29259:29263 sf.Imp <> BTrue constr
R29269:29274 sf.Imp <> BFalse constr
R29282:29282 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29289:29290 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29297:29297 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29283:29288 sf.Imp <> BFalse constr
R29291:29296 sf.Imp <> BFalse constr
R29302:29307 sf.Imp <> BFalse constr
R29315:29315 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29319:29320 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29324:29324 Coq.Init.Datatypes <> :core_scope:'('_x_','_x_','_'..'_','_x_')' not
R29329:29332 sf.Imp <> BAnd constr
def 29366:29378 <> fold_bexp_ex1
R29445:29449 Coq.Init.Logic <> :type_scope:x_'='_x not
R29386:29404 sf.Equiv <> fold_constants_bexp def
R29407:29410 sf.Imp <> BAnd constr
R29419:29422 sf.Imp <> BNot constr
R29425:29428 sf.Imp <> BAnd constr
R29437:29441 sf.Imp <> BTrue constr
R29430:29435 sf.Imp <> BFalse constr
R29412:29416 sf.Imp <> BTrue constr
R29450:29454 sf.Imp <> BTrue constr
def 29491:29503 <> fold_bexp_ex2
R29694:29698 Coq.Init.Logic <> :type_scope:x_'='_x not
R29511:29529 sf.Equiv <> fold_constants_bexp def
R29538:29541 sf.Imp <> BAnd constr
R29578:29580 sf.Imp <> BEq constr
R29609:29614 sf.Imp <> AMinus constr
R29626:29630 sf.Imp <> APlus constr
R29683:29686 sf.Imp <> ANum constr
R29633:29636 sf.Imp <> ANum constr
R29617:29620 sf.Imp <> ANum constr
R29583:29586 sf.Imp <> ANum constr
R29544:29546 sf.Imp <> BEq constr
R29557:29559 sf.Imp <> AId constr
R29561:29561 sf.Imp <> Y def
R29549:29551 sf.Imp <> AId constr
R29553:29553 sf.Imp <> X def
R29699:29702 sf.Imp <> BAnd constr
R29726:29730 sf.Imp <> BTrue constr
R29705:29707 sf.Imp <> BEq constr
R29718:29720 sf.Imp <> AId constr
R29722:29722 sf.Imp <> Y def
R29710:29712 sf.Imp <> AId constr
R29714:29714 sf.Imp <> X def
def 29884:29901 <> fold_constants_com
R29908:29910 sf.Imp <> com ind
R29915:29917 sf.Imp <> com ind
R29930:29930 sf.Equiv <> c var
R29941:29944 sf.Imp <> ::'SKIP' not
R29960:29963 sf.Imp <> ::'SKIP' not
R29970:29974 sf.Imp <> ::x_'::='_x not
R29987:29990 sf.Imp <> CAss constr
R29995:30013 sf.Equiv <> fold_constants_aexp def
R30024:30027 sf.Imp <> ::x_';;'_x not
R30041:30041 sf.Imp <> ::x_';;'_x not
R30063:30068 sf.Imp <> ::x_';;'_x not
R30090:30090 sf.Imp <> ::x_';;'_x not
R30042:30059 sf.Equiv <> fold_constants_com def
R30069:30086 sf.Equiv <> fold_constants_com def
R30096:30099 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30101:30106 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30109:30114 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30117:30119 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30136:30154 sf.Equiv <> fold_constants_bexp def
R30171:30175 sf.Imp <> BTrue constr
R30180:30197 sf.Equiv <> fold_constants_com def
R30210:30215 sf.Imp <> BFalse constr
R30220:30237 sf.Equiv <> fold_constants_com def
R30256:30259 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30262:30267 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30289:30315 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30337:30339 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30268:30285 sf.Equiv <> fold_constants_com def
R30316:30333 sf.Equiv <> fold_constants_com def
R30355:30360 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30362:30365 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30367:30370 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30387:30405 sf.Equiv <> fold_constants_bexp def
R30422:30426 sf.Imp <> BTrue constr
R30431:30436 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30442:30445 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30450:30453 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30437:30441 sf.Imp <> BTrue constr
R30446:30449 sf.Imp <> ::'SKIP' not
R30463:30468 sf.Imp <> BFalse constr
R30473:30476 sf.Imp <> ::'SKIP' not
R30492:30497 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30500:30504 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30525:30529 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30505:30522 sf.Equiv <> fold_constants_com def
R30524:30524 sf.Equiv <> c var
def 30557:30568 <> fold_com_ex1
R31051:31090 Coq.Init.Logic <> :type_scope:x_'='_x not
R31348:31348 Coq.Init.Logic <> :type_scope:x_'='_x not
R30574:30591 sf.Equiv <> fold_constants_com def
R30655:30662 sf.Imp <> ::x_';;'_x not
R30627:30631 sf.Imp <> ::x_'::='_x not
R30626:30626 sf.Imp <> X def
R30632:30636 sf.Imp <> APlus constr
R30648:30651 sf.Imp <> ANum constr
R30639:30642 sf.Imp <> ANum constr
R30692:30699 sf.Imp <> ::x_';;'_x not
R30664:30668 sf.Imp <> ::x_'::='_x not
R30663:30663 sf.Imp <> Y def
R30669:30674 sf.Imp <> AMinus constr
R30685:30688 sf.Imp <> ANum constr
R30677:30679 sf.Imp <> AId constr
R30681:30681 sf.Imp <> X def
R30826:30833 sf.Imp <> ::x_';;'_x not
R30700:30703 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30771:30783 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30788:30805 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30818:30825 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30704:30706 sf.Imp <> BEq constr
R30747:30751 sf.Imp <> APlus constr
R30763:30766 sf.Imp <> ANum constr
R30754:30757 sf.Imp <> ANum constr
R30709:30714 sf.Imp <> AMinus constr
R30725:30727 sf.Imp <> AId constr
R30729:30729 sf.Imp <> Y def
R30717:30719 sf.Imp <> AId constr
R30721:30721 sf.Imp <> X def
R30784:30787 sf.Imp <> ::'SKIP' not
R30807:30811 sf.Imp <> ::x_'::='_x not
R30806:30806 sf.Imp <> Y def
R30812:30815 sf.Imp <> ANum constr
R30968:30975 sf.Imp <> ::x_';;'_x not
R30834:30837 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30907:30925 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30938:30955 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30960:30967 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R30838:30840 sf.Imp <> BLe constr
R30865:30870 sf.Imp <> AMinus constr
R30882:30886 sf.Imp <> APlus constr
R30898:30901 sf.Imp <> ANum constr
R30889:30892 sf.Imp <> ANum constr
R30873:30876 sf.Imp <> ANum constr
R30843:30846 sf.Imp <> ANum constr
R30927:30931 sf.Imp <> ::x_'::='_x not
R30926:30926 sf.Imp <> Y def
R30932:30935 sf.Imp <> ANum constr
R30956:30959 sf.Imp <> ::'SKIP' not
R30976:30981 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R31002:31012 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R31041:31049 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R30982:30984 sf.Imp <> BEq constr
R30995:30998 sf.Imp <> ANum constr
R30987:30989 sf.Imp <> AId constr
R30991:30991 sf.Imp <> Y def
R31014:31018 sf.Imp <> ::x_'::='_x not
R31013:31013 sf.Imp <> X def
R31019:31023 sf.Imp <> APlus constr
R31034:31037 sf.Imp <> ANum constr
R31026:31028 sf.Imp <> AId constr
R31030:31030 sf.Imp <> X def
R31103:31110 sf.Imp <> ::x_';;'_x not
R31092:31096 sf.Imp <> ::x_'::='_x not
R31091:31091 sf.Imp <> X def
R31097:31100 sf.Imp <> ANum constr
R31140:31147 sf.Imp <> ::x_';;'_x not
R31112:31116 sf.Imp <> ::x_'::='_x not
R31111:31111 sf.Imp <> Y def
R31117:31122 sf.Imp <> AMinus constr
R31133:31136 sf.Imp <> ANum constr
R31125:31127 sf.Imp <> AId constr
R31129:31129 sf.Imp <> X def
R31246:31253 sf.Imp <> ::x_';;'_x not
R31148:31151 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31189:31201 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31206:31224 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31237:31245 sf.Imp <> ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R31152:31154 sf.Imp <> BEq constr
R31182:31185 sf.Imp <> ANum constr
R31157:31162 sf.Imp <> AMinus constr
R31173:31175 sf.Imp <> AId constr
R31177:31177 sf.Imp <> Y def
R31165:31167 sf.Imp <> AId constr
R31169:31169 sf.Imp <> X def
R31202:31205 sf.Imp <> ::'SKIP' not
R31226:31230 sf.Imp <> ::x_'::='_x not
R31225:31225 sf.Imp <> Y def
R31231:31234 sf.Imp <> ANum constr
R31266:31273 sf.Imp <> ::x_';;'_x not
R31255:31259 sf.Imp <> ::x_'::='_x not
R31254:31254 sf.Imp <> Y def
R31260:31263 sf.Imp <> ANum constr
R31274:31279 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R31300:31310 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R31339:31347 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R31280:31282 sf.Imp <> BEq constr
R31293:31296 sf.Imp <> ANum constr
R31285:31287 sf.Imp <> AId constr
R31289:31289 sf.Imp <> Y def
R31312:31316 sf.Imp <> ::x_'::='_x not
R31311:31311 sf.Imp <> X def
R31317:31321 sf.Imp <> APlus constr
R31332:31335 sf.Imp <> ANum constr
R31324:31326 sf.Imp <> AId constr
R31328:31328 sf.Imp <> X def
prf 31612:31636 <> fold_constants_aexp_sound
R31642:31653 sf.Equiv <> atrans_sound def
R31655:31673 sf.Equiv <> fold_constants_aexp def
R31692:31703 sf.Equiv <> atrans_sound def
R31723:31728 sf.Equiv <> aequiv def
R32137:32155 sf.Equiv <> fold_constants_aexp def
R32181:32199 sf.Equiv <> fold_constants_aexp def
R32137:32155 sf.Equiv <> fold_constants_aexp def
R32181:32199 sf.Equiv <> fold_constants_aexp def
R32181:32199 sf.Equiv <> fold_constants_aexp def
R32181:32199 sf.Equiv <> fold_constants_aexp def
R32181:32199 sf.Equiv <> fold_constants_aexp def
R32181:32199 sf.Equiv <> fold_constants_aexp def
R32137:32155 sf.Equiv <> fold_constants_aexp def
R32181:32199 sf.Equiv <> fold_constants_aexp def
R32181:32199 sf.Equiv <> fold_constants_aexp def
R32181:32199 sf.Equiv <> fold_constants_aexp def
R32181:32199 sf.Equiv <> fold_constants_aexp def
R32181:32199 sf.Equiv <> fold_constants_aexp def
R32137:32155 sf.Equiv <> fold_constants_aexp def
R32181:32199 sf.Equiv <> fold_constants_aexp def
R32181:32199 sf.Equiv <> fold_constants_aexp def
R32181:32199 sf.Equiv <> fold_constants_aexp def
R32181:32199 sf.Equiv <> fold_constants_aexp def
R32181:32199 sf.Equiv <> fold_constants_aexp def
prf 35180:35182 <> MyH
R35211:35211 Coq.Init.Logic <> :type_scope:x_'='_x not
R35199:35203 sf.Imp <> aeval def
R35209:35210 sf.Equiv <> a' var
R35205:35207 sf.Equiv <> st0 var
R35212:35216 sf.Imp <> aeval def
R35223:35241 sf.Equiv <> fold_constants_aexp def
R35243:35244 sf.Equiv <> a' var
R35218:35220 sf.Equiv <> st0 var
R35261:35285 sf.Equiv <> fold_constants_aexp_sound thm
R35261:35285 sf.Equiv <> fold_constants_aexp_sound thm
prf 35302:35326 <> fold_constants_bexp_sound
R35331:35342 sf.Equiv <> btrans_sound def
R35344:35362 sf.Equiv <> fold_constants_bexp def
R35381:35392 sf.Equiv <> btrans_sound def
R35412:35417 sf.Equiv <> bequiv def
R35916:35934 sf.Equiv <> fold_constants_aexp def
R35916:35934 sf.Equiv <> fold_constants_aexp def
R35973:35991 sf.Equiv <> fold_constants_aexp def
R35973:35991 sf.Equiv <> fold_constants_aexp def
R36029:36033 sf.Imp <> aeval def
R36048:36052 sf.Imp <> aeval def
R36095:36119 sf.Equiv <> fold_constants_aexp_sound thm
R36048:36052 sf.Imp <> aeval def
R36029:36033 sf.Imp <> aeval def
R36095:36119 sf.Equiv <> fold_constants_aexp_sound thm
R36095:36119 sf.Equiv <> fold_constants_aexp_sound thm
R36149:36153 sf.Imp <> aeval def
R36168:36172 sf.Imp <> aeval def
R36215:36239 sf.Equiv <> fold_constants_aexp_sound thm
R36168:36172 sf.Imp <> aeval def
R36149:36153 sf.Imp <> aeval def
R36215:36239 sf.Equiv <> fold_constants_aexp_sound thm
R36215:36239 sf.Equiv <> fold_constants_aexp_sound thm
R36433:36439 Coq.Arith.EqNat <> beq_nat syndef
R36433:36439 Coq.Arith.EqNat <> beq_nat syndef
R36496:36514 sf.Equiv <> fold_constants_aexp def
R36496:36514 sf.Equiv <> fold_constants_aexp def
R36541:36559 sf.Equiv <> fold_constants_aexp def
R36541:36559 sf.Equiv <> fold_constants_aexp def
R36614:36616 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36702:36704 Coq.Arith.Compare_dec <> leb syndef
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36614:36616 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36633:36635 sf.Equiv <> MyH thm
R36702:36704 Coq.Arith.Compare_dec <> leb syndef
R36702:36704 Coq.Arith.Compare_dec <> leb syndef
R36702:36704 Coq.Arith.Compare_dec <> leb syndef
R36702:36704 Coq.Arith.Compare_dec <> leb syndef
R36702:36704 Coq.Arith.Compare_dec <> leb syndef
R36702:36704 Coq.Arith.Compare_dec <> leb syndef
R36702:36704 Coq.Arith.Compare_dec <> leb syndef
R36702:36704 Coq.Arith.Compare_dec <> leb syndef
R36702:36704 Coq.Arith.Compare_dec <> leb syndef
R36702:36704 Coq.Arith.Compare_dec <> leb syndef
R36702:36704 Coq.Arith.Compare_dec <> leb syndef
R36702:36704 Coq.Arith.Compare_dec <> leb syndef
R36702:36704 Coq.Arith.Compare_dec <> leb syndef
R36702:36704 Coq.Arith.Compare_dec <> leb syndef
R36702:36704 Coq.Arith.Compare_dec <> leb syndef
R36702:36704 Coq.Arith.Compare_dec <> leb syndef
R36702:36704 Coq.Arith.Compare_dec <> leb syndef
R36702:36704 Coq.Arith.Compare_dec <> leb syndef
R36702:36704 Coq.Arith.Compare_dec <> leb syndef
R36702:36704 Coq.Arith.Compare_dec <> leb syndef
R36702:36704 Coq.Arith.Compare_dec <> leb syndef
R36702:36704 Coq.Arith.Compare_dec <> leb syndef
R36702:36704 Coq.Arith.Compare_dec <> leb syndef
R36702:36704 Coq.Arith.Compare_dec <> leb syndef
R36702:36704 Coq.Arith.Compare_dec <> leb syndef
R36776:36794 sf.Equiv <> fold_constants_bexp def
R36776:36794 sf.Equiv <> fold_constants_bexp def
R36903:36921 sf.Equiv <> fold_constants_bexp def
R36903:36921 sf.Equiv <> fold_constants_bexp def
R36960:36978 sf.Equiv <> fold_constants_bexp def
R36960:36978 sf.Equiv <> fold_constants_bexp def
prf 37239:37262 <> fold_constants_com_sound
R37268:37279 sf.Equiv <> ctrans_sound def
R37281:37298 sf.Equiv <> fold_constants_com def
R37317:37328 sf.Equiv <> ctrans_sound def
R37384:37394 sf.Equiv <> refl_cequiv thm
R37384:37394 sf.Equiv <> refl_cequiv thm
R37417:37431 sf.Equiv <> CAss_congruence thm
R37417:37431 sf.Equiv <> CAss_congruence thm
R37454:37478 sf.Equiv <> fold_constants_aexp_sound thm
R37454:37478 sf.Equiv <> fold_constants_aexp_sound thm
R37500:37514 sf.Equiv <> CSeq_congruence thm
R37500:37514 sf.Equiv <> CSeq_congruence thm
R37555:37560 sf.Equiv <> bequiv def
R37565:37583 sf.Equiv <> fold_constants_bexp def
R37555:37560 sf.Equiv <> bequiv def
R37565:37583 sf.Equiv <> fold_constants_bexp def
R37602:37626 sf.Equiv <> fold_constants_bexp_sound thm
R37602:37626 sf.Equiv <> fold_constants_bexp_sound thm
R37645:37663 sf.Equiv <> fold_constants_bexp def
R37695:37708 sf.Equiv <> CIf_congruence thm
R37645:37663 sf.Equiv <> fold_constants_bexp def
R37695:37708 sf.Equiv <> CIf_congruence thm
R37695:37708 sf.Equiv <> CIf_congruence thm
R37695:37708 sf.Equiv <> CIf_congruence thm
R37695:37708 sf.Equiv <> CIf_congruence thm
R37695:37708 sf.Equiv <> CIf_congruence thm
R37695:37708 sf.Equiv <> CIf_congruence thm
R37923:37934 sf.Equiv <> trans_cequiv thm
R37923:37934 sf.Equiv <> trans_cequiv thm
R37973:37980 sf.Equiv <> IFB_true thm
R37973:37980 sf.Equiv <> IFB_true thm
R38034:38045 sf.Equiv <> trans_cequiv thm
R38034:38045 sf.Equiv <> trans_cequiv thm
R38084:38092 sf.Equiv <> IFB_false thm
R38084:38092 sf.Equiv <> IFB_false thm
R38135:38140 sf.Equiv <> bequiv def
R38146:38164 sf.Equiv <> fold_constants_bexp def
R38135:38140 sf.Equiv <> bequiv def
R38146:38164 sf.Equiv <> fold_constants_bexp def
R38183:38207 sf.Equiv <> fold_constants_bexp_sound thm
R38183:38207 sf.Equiv <> fold_constants_bexp_sound thm
R38226:38244 sf.Equiv <> fold_constants_bexp def
R38226:38244 sf.Equiv <> fold_constants_bexp def
R38262:38271 sf.Equiv <> WHILE_true thm
R38262:38271 sf.Equiv <> WHILE_true thm
R38295:38305 sf.Equiv <> WHILE_false thm
R38295:38305 sf.Equiv <> WHILE_false thm
R38330:38335 sf.Equiv <> cequiv def
R38398:38414 sf.Equiv <> CWhile_congruence thm
R38432:38449 sf.Equiv <> fold_constants_com def
R38419:38421 sf.Imp <> BEq constr
R38398:38414 sf.Equiv <> CWhile_congruence thm
R38432:38449 sf.Equiv <> fold_constants_com def
R38419:38421 sf.Imp <> BEq constr
R38496:38501 sf.Equiv <> bequiv def
R38504:38506 sf.Imp <> BEq constr
R38496:38501 sf.Equiv <> bequiv def
R38504:38506 sf.Imp <> BEq constr
R38535:38540 sf.Equiv <> bequiv def
R38604:38609 sf.Equiv <> cequiv def
R38612:38629 sf.Equiv <> fold_constants_com def
R38604:38609 sf.Equiv <> cequiv def
R38612:38629 sf.Equiv <> fold_constants_com def
R38655:38660 sf.Equiv <> cequiv def
R38682:38688 Coq.Init.Logic <> iff_sym thm
R38682:38688 Coq.Init.Logic <> iff_sym thm
R38740:38756 sf.Equiv <> CWhile_congruence thm
R38772:38789 sf.Equiv <> fold_constants_com def
R38759:38761 sf.Imp <> BEq constr
R38740:38756 sf.Equiv <> CWhile_congruence thm
R38772:38789 sf.Equiv <> fold_constants_com def
R38759:38761 sf.Imp <> BEq constr
R38827:38843 sf.Equiv <> CWhile_congruence thm
R38861:38878 sf.Equiv <> fold_constants_com def
R38848:38850 sf.Imp <> BLe constr
R38827:38843 sf.Equiv <> CWhile_congruence thm
R38861:38878 sf.Equiv <> fold_constants_com def
R38848:38850 sf.Imp <> BLe constr
R38904:38920 sf.Equiv <> CWhile_congruence thm
R38937:38954 sf.Equiv <> fold_constants_com def
R38925:38928 sf.Imp <> BNot constr
R38904:38920 sf.Equiv <> CWhile_congruence thm
R38937:38954 sf.Equiv <> fold_constants_com def
R38925:38928 sf.Imp <> BNot constr
R38980:38996 sf.Equiv <> CWhile_congruence thm
R39020:39037 sf.Equiv <> fold_constants_com def
R39001:39004 sf.Imp <> BAnd constr
R38980:38996 sf.Equiv <> CWhile_congruence thm
R39020:39037 sf.Equiv <> fold_constants_com def
R39001:39004 sf.Imp <> BAnd constr
def 41452:41461 <> subst_aexp
R41468:41469 sf.Maps <> id ind
R41477:41480 sf.Imp <> aexp ind
R41488:41491 sf.Imp <> aexp ind
R41496:41499 sf.Imp <> aexp ind
R41512:41512 sf.Equiv <> a var
R41523:41526 sf.Imp <> ANum constr
R41545:41548 sf.Imp <> ANum constr
R41556:41558 sf.Imp <> AId constr
R41581:41586 sf.Maps <> beq_id def
R41588:41588 sf.Equiv <> i var
R41605:41607 sf.Imp <> AId constr
R41598:41598 sf.Equiv <> u var
R41616:41620 sf.Imp <> APlus constr
R41638:41642 sf.Imp <> APlus constr
R41665:41674 sf.Equiv <> subst_aexp def
R41678:41678 sf.Equiv <> u var
R41676:41676 sf.Equiv <> i var
R41645:41654 sf.Equiv <> subst_aexp def
R41658:41658 sf.Equiv <> u var
R41656:41656 sf.Equiv <> i var
R41688:41693 sf.Imp <> AMinus constr
R41710:41715 sf.Imp <> AMinus constr
R41738:41747 sf.Equiv <> subst_aexp def
R41751:41751 sf.Equiv <> u var
R41749:41749 sf.Equiv <> i var
R41718:41727 sf.Equiv <> subst_aexp def
R41731:41731 sf.Equiv <> u var
R41729:41729 sf.Equiv <> i var
R41761:41765 sf.Imp <> AMult constr
R41783:41787 sf.Imp <> AMult constr
R41810:41819 sf.Equiv <> subst_aexp def
R41823:41823 sf.Equiv <> u var
R41821:41821 sf.Equiv <> i var
R41790:41799 sf.Equiv <> subst_aexp def
R41803:41803 sf.Equiv <> u var
R41801:41801 sf.Equiv <> i var
def 41845:41857 <> subst_aexp_ex
R41940:41944 Coq.Init.Logic <> :type_scope:x_'='_x not
R41986:41986 Coq.Init.Logic <> :type_scope:x_'='_x not
R41863:41872 sf.Equiv <> subst_aexp def
R41918:41922 sf.Imp <> APlus constr
R41933:41935 sf.Imp <> AId constr
R41937:41937 sf.Imp <> X def
R41925:41927 sf.Imp <> AId constr
R41929:41929 sf.Imp <> Y def
R41877:41881 sf.Imp <> APlus constr
R41894:41897 sf.Imp <> ANum constr
R41884:41887 sf.Imp <> ANum constr
R41874:41874 sf.Imp <> X def
R41945:41949 sf.Imp <> APlus constr
R41960:41964 sf.Imp <> APlus constr
R41977:41980 sf.Imp <> ANum constr
R41967:41970 sf.Imp <> ANum constr
R41952:41954 sf.Imp <> AId constr
R41956:41956 sf.Imp <> Y def
def 42182:42201 <> subst_equiv_property
R42228:42233 sf.Equiv <> cequiv def
R42278:42280 sf.Imp <> ::x_';;'_x not
R42271:42275 sf.Imp <> ::x_'::='_x not
R42269:42270 sf.Equiv <> i1 var
R42276:42277 sf.Equiv <> a1 var
R42283:42287 sf.Imp <> ::x_'::='_x not
R42281:42282 sf.Equiv <> i2 var
R42288:42297 sf.Equiv <> subst_aexp def
R42305:42306 sf.Equiv <> a2 var
R42302:42303 sf.Equiv <> a1 var
R42299:42300 sf.Equiv <> i1 var
R42245:42247 sf.Imp <> ::x_';;'_x not
R42238:42242 sf.Imp <> ::x_'::='_x not
R42236:42237 sf.Equiv <> i1 var
R42243:42244 sf.Equiv <> a1 var
R42250:42254 sf.Imp <> ::x_'::='_x not
R42248:42249 sf.Equiv <> i2 var
R42255:42256 sf.Equiv <> a2 var
prf 43557:43569 <> subst_inequiv
R43575:43576 Coq.Init.Logic <> :type_scope:'~'_x not
R43577:43596 sf.Equiv <> subst_equiv_property def
R43615:43634 sf.Equiv <> subst_equiv_property def
R43845:43859 sf.Imp <> ::x_';;'_x not
R43818:43822 sf.Imp <> ::x_'::='_x not
R43817:43817 sf.Imp <> X def
R43823:43827 sf.Imp <> APlus constr
R43838:43841 sf.Imp <> ANum constr
R43830:43832 sf.Imp <> AId constr
R43834:43834 sf.Imp <> X def
R43861:43865 sf.Imp <> ::x_'::='_x not
R43860:43860 sf.Imp <> Y def
R43866:43868 sf.Imp <> AId constr
R43870:43870 sf.Imp <> X def
R43845:43859 sf.Imp <> ::x_';;'_x not
R43818:43822 sf.Imp <> ::x_'::='_x not
R43817:43817 sf.Imp <> X def
R43823:43827 sf.Imp <> APlus constr
R43838:43841 sf.Imp <> ANum constr
R43830:43832 sf.Imp <> AId constr
R43834:43834 sf.Imp <> X def
R43861:43865 sf.Imp <> ::x_'::='_x not
R43860:43860 sf.Imp <> Y def
R43866:43868 sf.Imp <> AId constr
R43870:43870 sf.Imp <> X def
R43926:43940 sf.Imp <> ::x_';;'_x not
R43899:43903 sf.Imp <> ::x_'::='_x not
R43898:43898 sf.Imp <> X def
R43904:43908 sf.Imp <> APlus constr
R43919:43922 sf.Imp <> ANum constr
R43911:43913 sf.Imp <> AId constr
R43915:43915 sf.Imp <> X def
R43942:43946 sf.Imp <> ::x_'::='_x not
R43941:43941 sf.Imp <> Y def
R43947:43951 sf.Imp <> APlus constr
R43962:43965 sf.Imp <> ANum constr
R43954:43956 sf.Imp <> AId constr
R43958:43958 sf.Imp <> X def
R43926:43940 sf.Imp <> ::x_';;'_x not
R43899:43903 sf.Imp <> ::x_'::='_x not
R43898:43898 sf.Imp <> X def
R43904:43908 sf.Imp <> APlus constr
R43919:43922 sf.Imp <> ANum constr
R43911:43913 sf.Imp <> AId constr
R43915:43915 sf.Imp <> X def
R43942:43946 sf.Imp <> ::x_'::='_x not
R43941:43941 sf.Imp <> Y def
R43947:43951 sf.Imp <> APlus constr
R43962:43965 sf.Imp <> ANum constr
R43954:43956 sf.Imp <> AId constr
R43958:43958 sf.Imp <> X def
R43994:43999 sf.Equiv <> cequiv def
R43994:43999 sf.Equiv <> cequiv def
R44216:44223 sf.Maps <> t_update def
R44252:44252 sf.Imp <> Y def
R44226:44233 sf.Maps <> t_update def
R44247:44247 sf.Imp <> X def
R44235:44245 sf.Imp <> empty_state def
R44216:44223 sf.Maps <> t_update def
R44252:44252 sf.Imp <> Y def
R44226:44233 sf.Maps <> t_update def
R44247:44247 sf.Imp <> X def
R44235:44245 sf.Imp <> empty_state def
R44277:44284 sf.Maps <> t_update def
R44313:44313 sf.Imp <> Y def
R44287:44294 sf.Maps <> t_update def
R44308:44308 sf.Imp <> X def
R44296:44306 sf.Imp <> empty_state def
R44277:44284 sf.Maps <> t_update def
R44313:44313 sf.Imp <> Y def
R44287:44294 sf.Maps <> t_update def
R44308:44308 sf.Imp <> X def
R44296:44306 sf.Imp <> empty_state def
R44342:44344 sf.Imp <> ::x_'/'_x_'\\'_x not
R44356:44359 sf.Imp <> ::x_'/'_x_'\\'_x not
R44345:44355 sf.Imp <> empty_state def
R44382:44384 sf.Imp <> ::x_'/'_x_'\\'_x not
R44396:44399 sf.Imp <> ::x_'/'_x_'\\'_x not
R44385:44395 sf.Imp <> empty_state def
R44453:44460 sf.Maps <> t_update def
R44474:44474 sf.Imp <> X def
R44462:44472 sf.Imp <> empty_state def
R44433:44437 sf.Imp <> E_Seq constr
R44494:44498 sf.Imp <> E_Ass constr
R44342:44344 sf.Imp <> ::x_'/'_x_'\\'_x not
R44356:44359 sf.Imp <> ::x_'/'_x_'\\'_x not
R44345:44355 sf.Imp <> empty_state def
R44382:44384 sf.Imp <> ::x_'/'_x_'\\'_x not
R44396:44399 sf.Imp <> ::x_'/'_x_'\\'_x not
R44385:44395 sf.Imp <> empty_state def
R44382:44384 sf.Imp <> ::x_'/'_x_'\\'_x not
R44396:44399 sf.Imp <> ::x_'/'_x_'\\'_x not
R44385:44395 sf.Imp <> empty_state def
R44453:44460 sf.Maps <> t_update def
R44474:44474 sf.Imp <> X def
R44462:44472 sf.Imp <> empty_state def
R44433:44437 sf.Imp <> E_Seq constr
R44494:44498 sf.Imp <> E_Ass constr
R44494:44498 sf.Imp <> E_Ass constr
R44453:44460 sf.Maps <> t_update def
R44474:44474 sf.Imp <> X def
R44462:44472 sf.Imp <> empty_state def
R44433:44437 sf.Imp <> E_Seq constr
R44494:44498 sf.Imp <> E_Ass constr
R44494:44498 sf.Imp <> E_Ass constr
R44453:44460 sf.Maps <> t_update def
R44474:44474 sf.Imp <> X def
R44462:44472 sf.Imp <> empty_state def
R44433:44437 sf.Imp <> E_Seq constr
R44494:44498 sf.Imp <> E_Ass constr
R44494:44498 sf.Imp <> E_Ass constr
R44453:44460 sf.Maps <> t_update def
R44474:44474 sf.Imp <> X def
R44462:44472 sf.Imp <> empty_state def
R44433:44437 sf.Imp <> E_Seq constr
R44653:44655 Coq.Init.Logic <> :type_scope:x_'='_x not
R44676:44694 sf.Imp <> ceval_deterministic thm
R44699:44709 sf.Imp <> empty_state def
R44653:44655 Coq.Init.Logic <> :type_scope:x_'='_x not
R44676:44694 sf.Imp <> ceval_deterministic thm
R44699:44709 sf.Imp <> empty_state def
R44751:44753 Coq.Init.Logic <> :type_scope:x_'='_x not
R44750:44750 sf.Imp <> Y def
R44758:44758 sf.Imp <> Y def
R44751:44753 Coq.Init.Logic <> :type_scope:x_'='_x not
R44750:44750 sf.Imp <> Y def
R44758:44758 sf.Imp <> Y def
ind 45166:45185 <> var_not_used_in_aexp
constr 45216:45221 <> VNUNum
constr 45270:45274 <> VNUId
constr 45332:45338 <> VNUPlus
constr 45472:45479 <> VNUMinus
constr 45614:45620 <> VNUMult
R45190:45191 sf.Maps <> id ind
R45200:45203 Coq.Init.Logic <> :type_scope:x_'->'_x not
R45196:45199 sf.Imp <> aexp ind
R45234:45253 sf.Equiv <> var_not_used_in_aexp ind
R45258:45261 sf.Imp <> ANum constr
R45263:45263 sf.Equiv <> n var
R45293:45296 Coq.Init.Logic <> :type_scope:x_'->'_x not
R45297:45316 sf.Equiv <> var_not_used_in_aexp ind
R45321:45323 sf.Imp <> AId constr
R45325:45325 sf.Equiv <> Y var
R45288:45291 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R45292:45292 sf.Equiv <> Y var
R45386:45395 Coq.Init.Logic <> :type_scope:x_'->'_x not
R45421:45430 Coq.Init.Logic <> :type_scope:x_'->'_x not
R45431:45450 sf.Equiv <> var_not_used_in_aexp ind
R45455:45459 sf.Imp <> APlus constr
R45464:45465 sf.Equiv <> a2 var
R45461:45462 sf.Equiv <> a1 var
R45396:45415 sf.Equiv <> var_not_used_in_aexp ind
R45419:45420 sf.Equiv <> a2 var
R45361:45380 sf.Equiv <> var_not_used_in_aexp ind
R45384:45385 sf.Equiv <> a1 var
R45527:45536 Coq.Init.Logic <> :type_scope:x_'->'_x not
R45562:45571 Coq.Init.Logic <> :type_scope:x_'->'_x not
R45572:45591 sf.Equiv <> var_not_used_in_aexp ind
R45596:45601 sf.Imp <> AMinus constr
R45606:45607 sf.Equiv <> a2 var
R45603:45604 sf.Equiv <> a1 var
R45537:45556 sf.Equiv <> var_not_used_in_aexp ind
R45560:45561 sf.Equiv <> a2 var
R45502:45521 sf.Equiv <> var_not_used_in_aexp ind
R45525:45526 sf.Equiv <> a1 var
R45668:45677 Coq.Init.Logic <> :type_scope:x_'->'_x not
R45703:45712 Coq.Init.Logic <> :type_scope:x_'->'_x not
R45713:45732 sf.Equiv <> var_not_used_in_aexp ind
R45737:45741 sf.Imp <> AMult constr
R45746:45747 sf.Equiv <> a2 var
R45743:45744 sf.Equiv <> a1 var
R45678:45697 sf.Equiv <> var_not_used_in_aexp ind
R45701:45702 sf.Equiv <> a2 var
R45643:45662 sf.Equiv <> var_not_used_in_aexp ind
R45666:45667 sf.Equiv <> a1 var
prf 45758:45772 <> aeval_weakening
R45820:45825 Coq.Init.Logic <> :type_scope:x_'->'_x not
R45852:45854 Coq.Init.Logic <> :type_scope:x_'='_x not
R45826:45830 sf.Imp <> aeval def
R45851:45851 sf.Equiv <> a var
R45833:45840 sf.Maps <> t_update def
R45847:45848 sf.Equiv <> ni var
R45845:45845 sf.Equiv <> i var
R45842:45843 sf.Equiv <> st var
R45855:45859 sf.Imp <> aeval def
R45864:45864 sf.Equiv <> a var
R45861:45862 sf.Equiv <> st var
R45796:45815 sf.Equiv <> var_not_used_in_aexp ind
R45819:45819 sf.Equiv <> a var
R45817:45817 sf.Equiv <> i var
R45961:45972 sf.Maps <> t_update_neq thm
R45961:45972 sf.Maps <> t_update_neq thm
prf 46553:46568 <> inequiv_exercise
R46573:46574 Coq.Init.Logic <> :type_scope:'~'_x not
R46575:46580 sf.Equiv <> cequiv def
R46608:46611 sf.Imp <> ::'SKIP' not
R46583:46588 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R46594:46597 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R46602:46605 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R46589:46593 sf.Imp <> BTrue constr
R46598:46601 sf.Imp <> ::'SKIP' not
R46636:46638 Coq.Init.Logic <> not def
R46676:46686 sf.Imp <> empty_state def
R46664:46674 sf.Imp <> empty_state def
R46676:46686 sf.Imp <> empty_state def
R46664:46674 sf.Imp <> empty_state def
R46710:46710 sf.Imp <> ::x_'/'_x_'\\'_x not
R46734:46735 sf.Imp <> ::x_'/'_x_'\\'_x not
R46747:46748 sf.Imp <> ::x_'/'_x_'\\'_x not
R46711:46716 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R46722:46725 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R46730:46733 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R46717:46721 sf.Imp <> BTrue constr
R46726:46729 sf.Imp <> ::'SKIP' not
R46736:46746 sf.Imp <> empty_state def
R46749:46759 sf.Imp <> empty_state def
R46710:46710 sf.Imp <> ::x_'/'_x_'\\'_x not
R46734:46735 sf.Imp <> ::x_'/'_x_'\\'_x not
R46747:46748 sf.Imp <> ::x_'/'_x_'\\'_x not
R46711:46716 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R46722:46725 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R46730:46733 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R46717:46721 sf.Imp <> BTrue constr
R46726:46729 sf.Imp <> ::'SKIP' not
R46736:46746 sf.Imp <> empty_state def
R46749:46759 sf.Imp <> empty_state def
R46784:46789 sf.Imp <> E_Skip constr
R46784:46789 sf.Imp <> E_Skip constr
R46804:46821 sf.Equiv <> WHILE_true_nonterm thm
R46846:46856 sf.Imp <> empty_state def
R46834:46844 sf.Imp <> empty_state def
R46829:46832 sf.Imp <> ::'SKIP' not
R46823:46827 sf.Imp <> BTrue constr
R46804:46821 sf.Equiv <> WHILE_true_nonterm thm
R46846:46856 sf.Imp <> empty_state def
R46834:46844 sf.Imp <> empty_state def
R46829:46832 sf.Imp <> ::'SKIP' not
R46823:46827 sf.Imp <> BTrue constr
R46867:46872 sf.Equiv <> bequiv def
mod 49005:49008 <> Himp
ind 49106:49108 Himp com
constr 49124:49128 Himp CSkip
constr 49140:49143 Himp CAss
constr 49169:49172 Himp CSeq
constr 49198:49200 Himp CIf
constr 49234:49239 Himp CWhile
constr 49266:49271 Himp CHavoc
R49132:49134 sf.Equiv <> com ind
R49149:49152 Coq.Init.Logic <> :type_scope:x_'->'_x not
R49157:49160 Coq.Init.Logic <> :type_scope:x_'->'_x not
R49161:49163 sf.Equiv <> com ind
R49153:49156 sf.Imp <> aexp ind
R49147:49148 sf.Maps <> id ind
R49179:49182 Coq.Init.Logic <> :type_scope:x_'->'_x not
R49186:49189 Coq.Init.Logic <> :type_scope:x_'->'_x not
R49190:49192 sf.Equiv <> com ind
R49183:49185 sf.Equiv <> com ind
R49176:49178 sf.Equiv <> com ind
R49208:49211 Coq.Init.Logic <> :type_scope:x_'->'_x not
R49215:49218 Coq.Init.Logic <> :type_scope:x_'->'_x not
R49222:49225 Coq.Init.Logic <> :type_scope:x_'->'_x not
R49226:49228 sf.Equiv <> com ind
R49219:49221 sf.Equiv <> com ind
R49212:49214 sf.Equiv <> com ind
R49204:49207 sf.Imp <> bexp ind
R49247:49250 Coq.Init.Logic <> :type_scope:x_'->'_x not
R49254:49257 Coq.Init.Logic <> :type_scope:x_'->'_x not
R49258:49260 sf.Equiv <> com ind
R49251:49253 sf.Equiv <> com ind
R49243:49246 sf.Imp <> bexp ind
R49277:49280 Coq.Init.Logic <> :type_scope:x_'->'_x not
R49281:49283 sf.Equiv <> com ind
R49275:49276 sf.Maps <> id ind
R49341:49345 sf.Equiv Himp CSkip constr
not 49327:49327 Himp ::'SKIP'
R49375:49378 sf.Equiv Himp CAss constr
not 49357:49357 Himp ::x_'::='_x
R49426:49429 sf.Equiv Himp CSeq constr
not 49409:49409 Himp ::x_';;'_x
R49514:49519 sf.Equiv Himp CWhile constr
not 49483:49483 Himp ::'WHILE'_x_'DO'_x_'END'
R49613:49615 sf.Equiv Himp CIf constr
not 49571:49571 Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI'
R49688:49693 sf.Equiv Himp CHavoc constr
not 49672:49672 Himp ::'HAVOC'_x
ind 50122:50126 Himp ceval
constr 50167:50172 Himp E_Skip
constr 50215:50219 Himp E_Ass
constr 50345:50349 Himp E_Seq
constr 50481:50488 Himp E_IfTrue
constr 50645:50653 Himp E_IfFalse
constr 50811:50820 Himp E_WhileEnd
constr 50940:50950 Himp E_WhileLoop
constr 51146:51152 Himp E_Havoc
R50133:50136 Coq.Init.Logic <> :type_scope:x_'->'_x not
R50142:50145 Coq.Init.Logic <> :type_scope:x_'->'_x not
R50151:50154 Coq.Init.Logic <> :type_scope:x_'->'_x not
R50146:50150 sf.Imp <> state def
R50137:50141 sf.Imp <> state def
R50130:50132 sf.Equiv Himp com ind
R51251:51255 sf.Equiv <> ceval ind
R50188:50192 sf.Imp <> state def
R50199:50201 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R50204:50207 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R50195:50198 sf.Equiv Himp ::'SKIP' not
R50202:50203 sf.Equiv <> st var
R50208:50209 sf.Equiv <> st var
R50236:50240 sf.Imp <> state def
R50249:50252 sf.Imp <> aexp ind
R50260:50262 Coq.Init.Datatypes <> nat ind
R50270:50271 sf.Maps <> id ind
R50296:50305 Coq.Init.Logic <> :type_scope:x_'->'_x not
R50306:50306 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R50315:50318 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R50321:50324 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R50308:50312 sf.Equiv Himp ::x_'::='_x not
R50307:50307 sf.Equiv <> X var
R50313:50314 sf.Equiv <> a1 var
R50319:50320 sf.Equiv <> st var
R50325:50332 sf.Maps <> t_update def
R50339:50339 sf.Equiv <> n var
R50337:50337 sf.Equiv <> X var
R50334:50335 sf.Equiv <> st var
R50292:50294 Coq.Init.Logic <> :type_scope:x_'='_x not
R50281:50285 sf.Imp <> aeval def
R50290:50291 sf.Equiv <> a1 var
R50287:50288 sf.Equiv <> st var
R50295:50295 sf.Equiv <> n var
R50369:50371 sf.Equiv Himp com ind
R50389:50393 sf.Imp <> state def
R50417:50426 Coq.Init.Logic <> :type_scope:x_'->'_x not
R50443:50452 Coq.Init.Logic <> :type_scope:x_'->'_x not
R50453:50453 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R50462:50465 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R50468:50471 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R50456:50459 sf.Equiv Himp ::x_';;'_x not
R50454:50455 sf.Equiv <> c1 var
R50460:50461 sf.Equiv <> c2 var
R50466:50467 sf.Equiv <> st var
R50472:50475 sf.Equiv <> st'' var
R50429:50431 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R50435:50438 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R50427:50428 sf.Equiv <> c2 var
R50432:50434 sf.Equiv <> st' var
R50439:50442 sf.Equiv <> st'' var
R50405:50407 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R50410:50413 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R50403:50404 sf.Equiv <> c1 var
R50408:50409 sf.Equiv <> st var
R50414:50416 sf.Equiv <> st' var
R50509:50513 sf.Imp <> state def
R50522:50525 sf.Imp <> bexp ind
R50537:50539 sf.Equiv Himp com ind
R50567:50576 Coq.Init.Logic <> :type_scope:x_'->'_x not
R50591:50600 Coq.Init.Logic <> :type_scope:x_'->'_x not
R50601:50601 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R50627:50630 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R50633:50636 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R50602:50605 sf.Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R50608:50613 sf.Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R50616:50621 sf.Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R50624:50626 sf.Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R50606:50607 sf.Equiv <> b1 var
R50614:50615 sf.Equiv <> c1 var
R50622:50623 sf.Equiv <> c2 var
R50631:50632 sf.Equiv <> st var
R50637:50639 sf.Equiv <> st' var
R50579:50581 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R50584:50587 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R50577:50578 sf.Equiv <> c1 var
R50582:50583 sf.Equiv <> st var
R50588:50590 sf.Equiv <> st' var
R50560:50562 Coq.Init.Logic <> :type_scope:x_'='_x not
R50549:50553 sf.Imp <> beval def
R50558:50559 sf.Equiv <> b1 var
R50555:50556 sf.Equiv <> st var
R50563:50566 Coq.Init.Datatypes <> true constr
R50674:50678 sf.Imp <> state def
R50687:50690 sf.Imp <> bexp ind
R50702:50704 sf.Equiv Himp com ind
R50733:50742 Coq.Init.Logic <> :type_scope:x_'->'_x not
R50757:50766 Coq.Init.Logic <> :type_scope:x_'->'_x not
R50767:50767 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R50793:50796 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R50799:50802 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R50768:50771 sf.Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R50774:50779 sf.Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R50782:50787 sf.Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R50790:50792 sf.Equiv Himp ::'IFB'_x_'THEN'_x_'ELSE'_x_'FI' not
R50772:50773 sf.Equiv <> b1 var
R50780:50781 sf.Equiv <> c1 var
R50788:50789 sf.Equiv <> c2 var
R50797:50798 sf.Equiv <> st var
R50803:50805 sf.Equiv <> st' var
R50745:50747 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R50750:50753 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R50743:50744 sf.Equiv <> c2 var
R50748:50749 sf.Equiv <> st var
R50754:50756 sf.Equiv <> st' var
R50725:50727 Coq.Init.Logic <> :type_scope:x_'='_x not
R50714:50718 sf.Imp <> beval def
R50723:50724 sf.Equiv <> b1 var
R50720:50721 sf.Equiv <> st var
R50728:50732 Coq.Init.Datatypes <> false constr
R50837:50840 sf.Imp <> bexp ind
R50849:50853 sf.Imp <> state def
R50862:50864 sf.Equiv Himp com ind
R50893:50903 Coq.Init.Logic <> :type_scope:x_'->'_x not
R50904:50904 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R50923:50926 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R50929:50932 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R50905:50910 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50913:50916 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50919:50922 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R50911:50912 sf.Equiv <> b1 var
R50917:50918 sf.Equiv <> c1 var
R50927:50928 sf.Equiv <> st var
R50933:50934 sf.Equiv <> st var
R50885:50887 Coq.Init.Logic <> :type_scope:x_'='_x not
R50874:50878 sf.Imp <> beval def
R50883:50884 sf.Equiv <> b1 var
R50880:50881 sf.Equiv <> st var
R50888:50892 Coq.Init.Datatypes <> false constr
R50976:50980 sf.Imp <> state def
R50989:50992 sf.Imp <> bexp ind
R51001:51003 sf.Equiv Himp com ind
R51031:51040 Coq.Init.Logic <> :type_scope:x_'->'_x not
R51055:51064 Coq.Init.Logic <> :type_scope:x_'->'_x not
R51099:51108 Coq.Init.Logic <> :type_scope:x_'->'_x not
R51109:51109 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R51128:51131 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R51134:51137 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R51110:51115 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R51118:51121 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R51124:51127 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R51116:51117 sf.Equiv <> b1 var
R51122:51123 sf.Equiv <> c1 var
R51132:51133 sf.Equiv <> st var
R51138:51141 sf.Equiv <> st'' var
R51065:51065 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R51084:51087 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R51091:51094 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R51066:51071 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R51074:51077 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R51080:51083 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R51072:51073 sf.Equiv <> b1 var
R51078:51079 sf.Equiv <> c1 var
R51088:51090 sf.Equiv <> st' var
R51095:51098 sf.Equiv <> st'' var
R51043:51045 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R51048:51051 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R51041:51042 sf.Equiv <> c1 var
R51046:51047 sf.Equiv <> st var
R51052:51054 sf.Equiv <> st' var
R51024:51026 Coq.Init.Logic <> :type_scope:x_'='_x not
R51013:51017 sf.Imp <> beval def
R51022:51023 sf.Equiv <> b1 var
R51019:51020 sf.Equiv <> st var
R51027:51030 Coq.Init.Datatypes <> true constr
R51168:51168 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R51176:51177 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R51180:51181 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R51169:51174 sf.Equiv Himp ::'HAVOC'_x not
R51175:51175 sf.Equiv <> X var
R51178:51179 sf.Equiv <> st var
R51182:51189 sf.Maps <> t_update def
R51196:51196 sf.Equiv <> n var
R51194:51194 sf.Equiv <> X var
R51191:51192 sf.Equiv <> st var
R51251:51255 sf.Equiv Himp ceval ind
not 51226:51226 Himp ::x_'/'_x_'\\'_x
def 51370:51383 Himp havoc_example1
R51387:51387 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R51395:51398 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R51410:51413 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R51388:51393 sf.Equiv Himp ::'HAVOC'_x not
R51394:51394 sf.Imp <> X def
R51399:51409 sf.Imp <> empty_state def
R51414:51421 sf.Maps <> t_update def
R51435:51435 sf.Imp <> X def
R51423:51433 sf.Imp <> empty_state def
R51453:51459 sf.Equiv Himp E_Havoc constr
R51453:51459 sf.Equiv Himp E_Havoc constr
def 51495:51508 Himp havoc_example2
R51514:51514 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R51529:51532 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R51544:51547 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R51519:51521 sf.Equiv Himp ::x_';;'_x not
R51515:51518 sf.Equiv Himp ::'SKIP' not
R51522:51527 sf.Equiv Himp ::'HAVOC'_x not
R51528:51528 sf.Imp <> Z def
R51533:51543 sf.Imp <> empty_state def
R51548:51555 sf.Maps <> t_update def
R51569:51569 sf.Imp <> Z def
R51557:51567 sf.Imp <> empty_state def
R51599:51609 sf.Imp <> empty_state def
R51588:51592 sf.Equiv Himp E_Seq constr
R51599:51609 sf.Imp <> empty_state def
R51588:51592 sf.Equiv Himp E_Seq constr
R51618:51623 sf.Equiv Himp E_Skip constr
R51618:51623 sf.Equiv Himp E_Skip constr
R51636:51642 sf.Equiv Himp E_Havoc constr
R51646:51656 sf.Imp <> empty_state def
R51644:51644 sf.Imp <> Z def
R51636:51642 sf.Equiv Himp E_Havoc constr
R51646:51656 sf.Imp <> empty_state def
R51644:51644 sf.Imp <> Z def
def 51787:51792 Himp cequiv
R51803:51805 sf.Equiv Himp com ind
R51834:51838 sf.Imp <> state def
R51857:51861 Coq.Init.Logic <> :type_scope:x_'<->'_x not
R51845:51847 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R51850:51853 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R51843:51844 sf.Equiv <> c1 var
R51848:51849 sf.Equiv <> st var
R51854:51856 sf.Equiv <> st' var
R51864:51866 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R51869:51872 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R51862:51863 sf.Equiv <> c2 var
R51867:51868 sf.Equiv <> st var
R51873:51875 sf.Equiv <> st' var
def 52092:52094 Himp pXY
R52108:52110 sf.Equiv Himp ::x_';;'_x not
R52101:52106 sf.Equiv Himp ::'HAVOC'_x not
R52107:52107 sf.Imp <> X def
R52111:52116 sf.Equiv Himp ::'HAVOC'_x not
R52117:52117 sf.Imp <> Y def
def 52132:52134 Himp pYX
R52148:52150 sf.Equiv Himp ::x_';;'_x not
R52141:52146 sf.Equiv Himp ::'HAVOC'_x not
R52147:52147 sf.Imp <> Y def
R52151:52156 sf.Equiv Himp ::'HAVOC'_x not
R52157:52157 sf.Imp <> X def
prf 52265:52278 Himp pXY_cequiv_pYX
R52298:52301 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R52284:52289 sf.Equiv Himp cequiv def
R52295:52297 sf.Equiv Himp pYX def
R52291:52293 sf.Equiv Himp pXY def
R52302:52302 Coq.Init.Logic <> :type_scope:'~'_x not
R52303:52308 sf.Equiv Himp cequiv def
R52314:52316 sf.Equiv Himp pYX def
R52310:52312 sf.Equiv Himp pXY def
R52333:52338 sf.Equiv Himp cequiv def
R52357:52359 Coq.Init.Logic <> not def
R52362:52364 sf.Equiv Himp pXY def
R52367:52369 sf.Equiv Himp pYX def
R52381:52381 sf.Imp <> X def
R52393:52393 sf.Imp <> Y def
R52409:52415 Coq.Arith.EqNat <> beq_nat syndef
R52409:52415 Coq.Arith.EqNat <> beq_nat syndef
R52466:52477 Coq.Arith.EqNat <> beq_nat_true thm
R52466:52477 Coq.Arith.EqNat <> beq_nat_true thm
R52466:52477 Coq.Arith.EqNat <> beq_nat_true thm
R52521:52532 Coq.Arith.EqNat <> beq_nat_true thm
R52521:52532 Coq.Arith.EqNat <> beq_nat_true thm
R52521:52532 Coq.Arith.EqNat <> beq_nat_true thm
R52701:52701 Coq.Init.Logic <> :type_scope:x_'='_x not
R52658:52665 sf.Maps <> t_update def
R52692:52693 sf.Maps <> Id constr
R52668:52675 sf.Maps <> t_update def
R52681:52682 sf.Maps <> Id constr
R52702:52709 sf.Maps <> t_update def
R52737:52738 sf.Maps <> Id constr
R52712:52719 sf.Maps <> t_update def
R52725:52726 sf.Maps <> Id constr
R52701:52701 Coq.Init.Logic <> :type_scope:x_'='_x not
R52658:52665 sf.Maps <> t_update def
R52692:52693 sf.Maps <> Id constr
R52668:52675 sf.Maps <> t_update def
R52681:52682 sf.Maps <> Id constr
R52702:52709 sf.Maps <> t_update def
R52737:52738 sf.Maps <> Id constr
R52712:52719 sf.Maps <> t_update def
R52725:52726 sf.Maps <> Id constr
R52764:52771 sf.Maps <> t_update def
R52780:52804 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R52780:52804 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R52862:52868 Coq.Arith.EqNat <> beq_nat syndef
R52862:52868 Coq.Arith.EqNat <> beq_nat syndef
R52906:52912 Coq.Arith.EqNat <> beq_nat syndef
R52906:52912 Coq.Arith.EqNat <> beq_nat syndef
R52949:52949 Coq.Init.Logic <> :type_scope:x_'='_x not
R52949:52949 Coq.Init.Logic <> :type_scope:x_'='_x not
R52974:52985 Coq.Arith.EqNat <> beq_nat_true thm
R52974:52985 Coq.Arith.EqNat <> beq_nat_true thm
R53020:53020 Coq.Init.Logic <> :type_scope:x_'='_x not
R53020:53020 Coq.Init.Logic <> :type_scope:x_'='_x not
R53045:53056 Coq.Arith.EqNat <> beq_nat_true thm
R53045:53056 Coq.Arith.EqNat <> beq_nat_true thm
R53207:53214 sf.Maps <> t_update def
R53220:53221 sf.Maps <> Id constr
R53195:53199 sf.Equiv Himp E_Seq constr
R53207:53214 sf.Maps <> t_update def
R53220:53221 sf.Maps <> Id constr
R53195:53199 sf.Equiv Himp E_Seq constr
R53238:53244 sf.Equiv Himp E_Havoc constr
R53238:53244 sf.Equiv Himp E_Havoc constr
R53253:53259 sf.Equiv Himp E_Havoc constr
R53253:53259 sf.Equiv Himp E_Havoc constr
R53384:53384 Coq.Init.Logic <> :type_scope:x_'='_x not
R53341:53348 sf.Maps <> t_update def
R53375:53376 sf.Maps <> Id constr
R53351:53358 sf.Maps <> t_update def
R53364:53365 sf.Maps <> Id constr
R53385:53392 sf.Maps <> t_update def
R53420:53421 sf.Maps <> Id constr
R53395:53402 sf.Maps <> t_update def
R53408:53409 sf.Maps <> Id constr
R53384:53384 Coq.Init.Logic <> :type_scope:x_'='_x not
R53341:53348 sf.Maps <> t_update def
R53375:53376 sf.Maps <> Id constr
R53351:53358 sf.Maps <> t_update def
R53364:53365 sf.Maps <> Id constr
R53385:53392 sf.Maps <> t_update def
R53420:53421 sf.Maps <> Id constr
R53395:53402 sf.Maps <> t_update def
R53408:53409 sf.Maps <> Id constr
R53447:53454 sf.Maps <> t_update def
R53463:53487 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R53463:53487 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R53545:53551 Coq.Arith.EqNat <> beq_nat syndef
R53545:53551 Coq.Arith.EqNat <> beq_nat syndef
R53589:53595 Coq.Arith.EqNat <> beq_nat syndef
R53589:53595 Coq.Arith.EqNat <> beq_nat syndef
R53632:53632 Coq.Init.Logic <> :type_scope:x_'='_x not
R53632:53632 Coq.Init.Logic <> :type_scope:x_'='_x not
R53657:53668 Coq.Arith.EqNat <> beq_nat_true thm
R53657:53668 Coq.Arith.EqNat <> beq_nat_true thm
R53703:53703 Coq.Init.Logic <> :type_scope:x_'='_x not
R53703:53703 Coq.Init.Logic <> :type_scope:x_'='_x not
R53728:53739 Coq.Arith.EqNat <> beq_nat_true thm
R53728:53739 Coq.Arith.EqNat <> beq_nat_true thm
R53892:53899 sf.Maps <> t_update def
R53905:53906 sf.Maps <> Id constr
R53880:53884 sf.Equiv Himp E_Seq constr
R53892:53899 sf.Maps <> t_update def
R53905:53906 sf.Maps <> Id constr
R53880:53884 sf.Equiv Himp E_Seq constr
R53922:53928 sf.Equiv Himp E_Havoc constr
R53922:53928 sf.Equiv Himp E_Havoc constr
R53937:53943 sf.Equiv Himp E_Havoc constr
R53937:53943 sf.Equiv Himp E_Havoc constr
def 54098:54103 Himp ptwice
R54117:54119 sf.Equiv Himp ::x_';;'_x not
R54110:54115 sf.Equiv Himp ::'HAVOC'_x not
R54116:54116 sf.Imp <> X def
R54120:54125 sf.Equiv Himp ::'HAVOC'_x not
R54126:54126 sf.Imp <> Y def
def 54141:54145 Himp pcopy
R54159:54161 sf.Equiv Himp ::x_';;'_x not
R54152:54157 sf.Equiv Himp ::'HAVOC'_x not
R54158:54158 sf.Imp <> X def
R54163:54167 sf.Equiv Himp ::x_'::='_x not
R54162:54162 sf.Imp <> Y def
R54168:54170 sf.Imp <> AId constr
R54172:54172 sf.Imp <> X def
prf 54343:54361 Himp ptwice_cequiv_pcopy
R54386:54389 Coq.Init.Logic <> :type_scope:x_'\/'_x not
R54367:54372 sf.Equiv Himp cequiv def
R54381:54385 sf.Equiv Himp pcopy def
R54374:54379 sf.Equiv Himp ptwice def
R54390:54390 Coq.Init.Logic <> :type_scope:'~'_x not
R54391:54396 sf.Equiv Himp cequiv def
R54405:54409 sf.Equiv Himp pcopy def
R54398:54403 sf.Equiv Himp ptwice def
R54433:54435 Coq.Init.Logic <> not def
R54438:54443 sf.Equiv Himp cequiv def
R54446:54451 sf.Equiv Himp ptwice def
R54454:54458 sf.Equiv Himp pcopy def
R54497:54504 sf.Maps <> t_update def
R54533:54533 sf.Imp <> Y def
R54507:54514 sf.Maps <> t_update def
R54528:54528 sf.Imp <> X def
R54516:54526 sf.Imp <> empty_state def
R54484:54494 sf.Imp <> empty_state def
R54497:54504 sf.Maps <> t_update def
R54533:54533 sf.Imp <> Y def
R54507:54514 sf.Maps <> t_update def
R54528:54528 sf.Imp <> X def
R54516:54526 sf.Imp <> empty_state def
R54484:54494 sf.Imp <> empty_state def
R54557:54557 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R54579:54582 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R54594:54596 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R54565:54567 sf.Equiv Himp ::x_';;'_x not
R54558:54563 sf.Equiv Himp ::'HAVOC'_x not
R54564:54564 sf.Imp <> X def
R54569:54573 sf.Equiv Himp ::x_'::='_x not
R54568:54568 sf.Imp <> Y def
R54574:54576 sf.Imp <> AId constr
R54578:54578 sf.Imp <> X def
R54583:54593 sf.Imp <> empty_state def
R54597:54604 sf.Maps <> t_update def
R54633:54633 sf.Imp <> Y def
R54607:54614 sf.Maps <> t_update def
R54628:54628 sf.Imp <> X def
R54616:54626 sf.Imp <> empty_state def
R54557:54557 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R54579:54582 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R54594:54596 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R54565:54567 sf.Equiv Himp ::x_';;'_x not
R54558:54563 sf.Equiv Himp ::'HAVOC'_x not
R54564:54564 sf.Imp <> X def
R54569:54573 sf.Equiv Himp ::x_'::='_x not
R54568:54568 sf.Imp <> Y def
R54574:54576 sf.Imp <> AId constr
R54578:54578 sf.Imp <> X def
R54583:54593 sf.Imp <> empty_state def
R54597:54604 sf.Maps <> t_update def
R54633:54633 sf.Imp <> Y def
R54607:54614 sf.Maps <> t_update def
R54628:54628 sf.Imp <> X def
R54616:54626 sf.Imp <> empty_state def
R54671:54678 sf.Maps <> t_update def
R54692:54692 sf.Imp <> X def
R54680:54690 sf.Imp <> empty_state def
R54658:54662 sf.Equiv Himp E_Seq constr
R54671:54678 sf.Maps <> t_update def
R54692:54692 sf.Imp <> X def
R54680:54690 sf.Imp <> empty_state def
R54658:54662 sf.Equiv Himp E_Seq constr
R54704:54710 sf.Equiv Himp E_Havoc constr
R54704:54710 sf.Equiv Himp E_Havoc constr
R54719:54725 sf.Equiv Himp E_Havoc constr
R54719:54725 sf.Equiv Himp E_Havoc constr
R54751:54751 sf.Imp <> X def
R54753:54753 sf.Imp <> Y def
R54849:54856 sf.Maps <> t_update def
R54894:54894 Coq.Init.Logic <> :type_scope:x_'='_x not
R54905:54906 sf.Maps <> id ind
R54922:54927 sf.Maps <> beq_id def
R54936:54937 sf.Equiv <> x' var
R54930:54931 sf.Maps <> Id constr
R55050:55055 sf.Maps <> beq_id def
R55064:55065 sf.Equiv <> x' var
R55058:55059 sf.Maps <> Id constr
R55079:55089 sf.Imp <> empty_state def
R55091:55092 sf.Equiv <> x' var
R54964:54969 sf.Maps <> beq_id def
R54979:54980 sf.Maps <> Id constr
R54972:54973 sf.Maps <> Id constr
R55015:55025 sf.Imp <> empty_state def
R55028:55029 sf.Maps <> Id constr
R55096:55097 sf.Maps <> Id constr
R54894:54894 Coq.Init.Logic <> :type_scope:x_'='_x not
R54905:54906 sf.Maps <> id ind
R54922:54927 sf.Maps <> beq_id def
R54936:54937 sf.Equiv <> x' var
R54930:54931 sf.Maps <> Id constr
R55050:55055 sf.Maps <> beq_id def
R55064:55065 sf.Equiv <> x' var
R55058:55059 sf.Maps <> Id constr
R55079:55089 sf.Imp <> empty_state def
R55091:55092 sf.Equiv <> x' var
R54964:54969 sf.Maps <> beq_id def
R54979:54980 sf.Maps <> Id constr
R54972:54973 sf.Maps <> Id constr
R55015:55025 sf.Imp <> empty_state def
R55028:55029 sf.Maps <> Id constr
R55096:55097 sf.Maps <> Id constr
R55191:55191 Coq.Init.Logic <> :type_scope:x_'='_x not
R55188:55188 Coq.Init.Datatypes <> S constr
R55202:55203 sf.Maps <> id ind
R55219:55224 sf.Maps <> beq_id def
R55233:55234 sf.Equiv <> x' var
R55227:55228 sf.Maps <> Id constr
R55359:55364 sf.Maps <> beq_id def
R55373:55374 sf.Equiv <> x' var
R55367:55368 sf.Maps <> Id constr
R55390:55400 sf.Imp <> empty_state def
R55402:55403 sf.Equiv <> x' var
R55381:55381 Coq.Init.Datatypes <> S constr
R55261:55266 sf.Maps <> beq_id def
R55276:55277 sf.Maps <> Id constr
R55269:55270 sf.Maps <> Id constr
R55314:55324 sf.Imp <> empty_state def
R55327:55328 sf.Maps <> Id constr
R55296:55296 Coq.Init.Datatypes <> S constr
R55407:55408 sf.Maps <> Id constr
R55191:55191 Coq.Init.Logic <> :type_scope:x_'='_x not
R55188:55188 Coq.Init.Datatypes <> S constr
R55202:55203 sf.Maps <> id ind
R55219:55224 sf.Maps <> beq_id def
R55233:55234 sf.Equiv <> x' var
R55227:55228 sf.Maps <> Id constr
R55359:55364 sf.Maps <> beq_id def
R55373:55374 sf.Equiv <> x' var
R55367:55368 sf.Maps <> Id constr
R55390:55400 sf.Imp <> empty_state def
R55402:55403 sf.Equiv <> x' var
R55381:55381 Coq.Init.Datatypes <> S constr
R55261:55266 sf.Maps <> beq_id def
R55276:55277 sf.Maps <> Id constr
R55269:55270 sf.Maps <> Id constr
R55314:55324 sf.Imp <> empty_state def
R55327:55328 sf.Maps <> Id constr
R55296:55296 Coq.Init.Datatypes <> S constr
R55407:55408 sf.Maps <> Id constr
R55511:55511 Coq.Init.Logic <> :type_scope:x_'='_x not
R55522:55523 sf.Maps <> id ind
R55539:55544 sf.Maps <> beq_id def
R55553:55554 sf.Equiv <> x' var
R55547:55548 sf.Maps <> Id constr
R55667:55672 sf.Maps <> beq_id def
R55681:55682 sf.Equiv <> x' var
R55675:55676 sf.Maps <> Id constr
R55696:55706 sf.Imp <> empty_state def
R55708:55709 sf.Equiv <> x' var
R55581:55586 sf.Maps <> beq_id def
R55596:55597 sf.Maps <> Id constr
R55589:55590 sf.Maps <> Id constr
R55632:55642 sf.Imp <> empty_state def
R55645:55646 sf.Maps <> Id constr
R55713:55714 sf.Maps <> Id constr
R55511:55511 Coq.Init.Logic <> :type_scope:x_'='_x not
R55522:55523 sf.Maps <> id ind
R55539:55544 sf.Maps <> beq_id def
R55553:55554 sf.Equiv <> x' var
R55547:55548 sf.Maps <> Id constr
R55667:55672 sf.Maps <> beq_id def
R55681:55682 sf.Equiv <> x' var
R55675:55676 sf.Maps <> Id constr
R55696:55706 sf.Imp <> empty_state def
R55708:55709 sf.Equiv <> x' var
R55581:55586 sf.Maps <> beq_id def
R55596:55597 sf.Maps <> Id constr
R55589:55590 sf.Maps <> Id constr
R55632:55642 sf.Imp <> empty_state def
R55645:55646 sf.Maps <> Id constr
R55713:55714 sf.Maps <> Id constr
def 56622:56623 Himp p1
R56627:56629 sf.Equiv Himp com ind
R56636:56642 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R56670:56678 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R56721:56726 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R56643:56646 sf.Imp <> BNot constr
R56649:56651 sf.Imp <> BEq constr
R56662:56665 sf.Imp <> ANum constr
R56654:56656 sf.Imp <> AId constr
R56658:56658 sf.Imp <> X def
R56686:56692 sf.Equiv Himp ::x_';;'_x not
R56679:56684 sf.Equiv Himp ::'HAVOC'_x not
R56685:56685 sf.Imp <> Y def
R56694:56698 sf.Equiv Himp ::x_'::='_x not
R56693:56693 sf.Imp <> X def
R56699:56703 sf.Imp <> APlus constr
R56714:56717 sf.Imp <> ANum constr
R56706:56708 sf.Imp <> AId constr
R56710:56710 sf.Imp <> X def
def 56741:56742 Himp p2
R56746:56748 sf.Equiv Himp com ind
R56755:56761 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R56789:56797 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R56802:56807 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R56762:56765 sf.Imp <> BNot constr
R56768:56770 sf.Imp <> BEq constr
R56781:56784 sf.Imp <> ANum constr
R56773:56775 sf.Imp <> AId constr
R56777:56777 sf.Imp <> X def
R56798:56801 sf.Equiv Himp ::'SKIP' not
prf 57068:57081 Himp p1_may_diverge
R57109:57114 Coq.Init.Logic <> :type_scope:x_'->'_x not
R57115:57116 Coq.Init.Logic <> :type_scope:'~'_x not
R57119:57121 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R57124:57127 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R57117:57118 sf.Equiv Himp p1 def
R57122:57123 sf.Equiv <> st var
R57128:57130 sf.Equiv <> st' var
R57104:57107 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R57100:57101 sf.Equiv <> st var
R57103:57103 sf.Imp <> X def
R57155:57157 Coq.Init.Logic <> not def
R57167:57168 sf.Equiv Himp p1 def
R57192:57197 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R57225:57228 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R57267:57270 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R57198:57201 sf.Imp <> BNot constr
R57204:57206 sf.Imp <> BEq constr
R57217:57220 sf.Imp <> ANum constr
R57209:57211 sf.Imp <> AId constr
R57213:57213 sf.Imp <> X def
R57236:57238 sf.Equiv Himp ::x_';;'_x not
R57229:57234 sf.Equiv Himp ::'HAVOC'_x not
R57235:57235 sf.Imp <> Y def
R57240:57244 sf.Equiv Himp ::x_'::='_x not
R57239:57239 sf.Imp <> X def
R57245:57249 sf.Imp <> APlus constr
R57260:57263 sf.Imp <> ANum constr
R57252:57254 sf.Imp <> AId constr
R57256:57256 sf.Imp <> X def
R57192:57197 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R57225:57228 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R57267:57270 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R57198:57201 sf.Imp <> BNot constr
R57204:57206 sf.Imp <> BEq constr
R57217:57220 sf.Imp <> ANum constr
R57209:57211 sf.Imp <> AId constr
R57213:57213 sf.Imp <> X def
R57236:57238 sf.Equiv Himp ::x_';;'_x not
R57229:57234 sf.Equiv Himp ::'HAVOC'_x not
R57235:57235 sf.Imp <> Y def
R57240:57244 sf.Equiv Himp ::x_'::='_x not
R57239:57239 sf.Imp <> X def
R57245:57249 sf.Imp <> APlus constr
R57260:57263 sf.Imp <> ANum constr
R57252:57254 sf.Imp <> AId constr
R57256:57256 sf.Imp <> X def
R57350:57350 Coq.Init.Logic <> :type_scope:x_'='_x not
R57367:57370 Coq.Init.Logic <> :type_scope:x_'='_x not
R57351:57357 Coq.Arith.EqNat <> beq_nat syndef
R57363:57363 sf.Imp <> X def
R57371:57374 Coq.Init.Datatypes <> negb def
R57376:57380 Coq.Init.Datatypes <> false constr
R57350:57350 Coq.Init.Logic <> :type_scope:x_'='_x not
R57367:57370 Coq.Init.Logic <> :type_scope:x_'='_x not
R57351:57357 Coq.Arith.EqNat <> beq_nat syndef
R57363:57363 sf.Imp <> X def
R57371:57374 Coq.Init.Datatypes <> negb def
R57376:57380 Coq.Init.Datatypes <> false constr
R57390:57397 Coq.Bool.Bool <> negb_sym thm
R57390:57397 Coq.Bool.Bool <> negb_sym thm
R57448:57448 Coq.Init.Logic <> :type_scope:x_'='_x not
R57447:57447 sf.Imp <> X def
R57448:57448 Coq.Init.Logic <> :type_scope:x_'='_x not
R57447:57447 sf.Imp <> X def
R57459:57470 Coq.Arith.EqNat <> beq_nat_true thm
R57459:57470 Coq.Arith.EqNat <> beq_nat_true thm
R57680:57687 sf.Maps <> t_update def
R57717:57719 Coq.Init.Datatypes <> nat ind
R57725:57726 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R57723:57723 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R57722:57722 sf.Equiv <> n var
R57717:57719 Coq.Init.Datatypes <> nat ind
R57725:57726 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R57723:57723 Coq.Init.Peano <> :nat_scope:x_'+'_x not
R57722:57722 sf.Equiv <> n var
prf 57823:57836 Himp p2_may_diverge
R57864:57869 Coq.Init.Logic <> :type_scope:x_'->'_x not
R57870:57871 Coq.Init.Logic <> :type_scope:'~'_x not
R57874:57876 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R57879:57882 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R57872:57873 sf.Equiv Himp p2 def
R57877:57878 sf.Equiv <> st var
R57883:57885 sf.Equiv <> st' var
R57859:57862 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R57855:57856 sf.Equiv <> st var
R57858:57858 sf.Imp <> X def
R57910:57912 Coq.Init.Logic <> not def
R57922:57923 sf.Equiv Himp p2 def
R57947:57952 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R57980:57983 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R57988:57991 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R57953:57956 sf.Imp <> BNot constr
R57959:57961 sf.Imp <> BEq constr
R57972:57975 sf.Imp <> ANum constr
R57964:57966 sf.Imp <> AId constr
R57968:57968 sf.Imp <> X def
R57984:57987 sf.Equiv Himp ::'SKIP' not
R57947:57952 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R57980:57983 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R57988:57991 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R57953:57956 sf.Imp <> BNot constr
R57959:57961 sf.Imp <> BEq constr
R57972:57975 sf.Imp <> ANum constr
R57964:57966 sf.Imp <> AId constr
R57968:57968 sf.Imp <> X def
R57984:57987 sf.Equiv Himp ::'SKIP' not
R58071:58071 Coq.Init.Logic <> :type_scope:x_'='_x not
R58088:58091 Coq.Init.Logic <> :type_scope:x_'='_x not
R58072:58078 Coq.Arith.EqNat <> beq_nat syndef
R58084:58084 sf.Imp <> X def
R58092:58095 Coq.Init.Datatypes <> negb def
R58097:58101 Coq.Init.Datatypes <> false constr
R58071:58071 Coq.Init.Logic <> :type_scope:x_'='_x not
R58088:58091 Coq.Init.Logic <> :type_scope:x_'='_x not
R58072:58078 Coq.Arith.EqNat <> beq_nat syndef
R58084:58084 sf.Imp <> X def
R58092:58095 Coq.Init.Datatypes <> negb def
R58097:58101 Coq.Init.Datatypes <> false constr
R58111:58118 Coq.Bool.Bool <> negb_sym thm
R58111:58118 Coq.Bool.Bool <> negb_sym thm
R58171:58171 Coq.Init.Logic <> :type_scope:x_'='_x not
R58170:58170 sf.Imp <> X def
R58171:58171 Coq.Init.Logic <> :type_scope:x_'='_x not
R58170:58170 sf.Imp <> X def
R58182:58193 Coq.Arith.EqNat <> beq_nat_true thm
R58182:58193 Coq.Arith.EqNat <> beq_nat_true thm
prf 58496:58506 Himp p1_p2_equiv
R58510:58515 sf.Equiv Himp cequiv def
R58520:58521 sf.Equiv Himp p2 def
R58517:58518 sf.Equiv Himp p1 def
R58559:58564 sf.Equiv Himp cequiv def
R58567:58568 sf.Equiv Himp p1 def
R58571:58572 sf.Equiv Himp p2 def
R58644:58653 sf.Equiv Himp E_WhileEnd constr
R58644:58653 sf.Equiv Himp E_WhileEnd constr
R58697:58701 Coq.Init.Logic <> False ind
R58697:58701 Coq.Init.Logic <> False ind
R58711:58724 sf.Equiv Himp p1_may_diverge thm
R58711:58724 sf.Equiv Himp p1_may_diverge thm
R58745:58761 Coq.Arith.EqNat <> beq_nat_false_iff syndef
R58745:58761 Coq.Arith.EqNat <> beq_nat_false_iff syndef
R58773:58773 Coq.Init.Logic <> :type_scope:x_'='_x not
R58790:58792 Coq.Init.Logic <> :type_scope:x_'='_x not
R58774:58780 Coq.Arith.EqNat <> beq_nat syndef
R58786:58786 sf.Imp <> X def
R58793:58796 Coq.Init.Datatypes <> negb def
R58798:58801 Coq.Init.Datatypes <> true constr
R58773:58773 Coq.Init.Logic <> :type_scope:x_'='_x not
R58790:58792 Coq.Init.Logic <> :type_scope:x_'='_x not
R58774:58780 Coq.Arith.EqNat <> beq_nat syndef
R58786:58786 sf.Imp <> X def
R58793:58796 Coq.Init.Datatypes <> negb def
R58798:58801 Coq.Init.Datatypes <> true constr
R58813:58820 Coq.Bool.Bool <> negb_sym thm
R58813:58820 Coq.Bool.Bool <> negb_sym thm
R58864:58865 sf.Equiv Himp p1 def
R58948:58957 sf.Equiv Himp E_WhileEnd constr
R58948:58957 sf.Equiv Himp E_WhileEnd constr
R59004:59008 Coq.Init.Logic <> False ind
R59004:59008 Coq.Init.Logic <> False ind
R59019:59032 sf.Equiv Himp p2_may_diverge thm
R59019:59032 sf.Equiv Himp p2_may_diverge thm
R59053:59069 Coq.Arith.EqNat <> beq_nat_false_iff syndef
R59053:59069 Coq.Arith.EqNat <> beq_nat_false_iff syndef
R59096:59096 Coq.Init.Logic <> :type_scope:x_'='_x not
R59080:59086 Coq.Arith.EqNat <> beq_nat syndef
R59092:59092 sf.Imp <> X def
R59097:59100 Coq.Init.Datatypes <> negb def
R59102:59105 Coq.Init.Datatypes <> true constr
R59096:59096 Coq.Init.Logic <> :type_scope:x_'='_x not
R59080:59086 Coq.Arith.EqNat <> beq_nat syndef
R59092:59092 sf.Imp <> X def
R59097:59100 Coq.Init.Datatypes <> negb def
R59102:59105 Coq.Init.Datatypes <> true constr
R59118:59125 Coq.Bool.Bool <> negb_sym thm
R59118:59125 Coq.Bool.Bool <> negb_sym thm
R59169:59170 sf.Equiv Himp p1 def
def 59346:59347 Himp p3
R59351:59353 sf.Equiv Himp com ind
R59372:59376 sf.Equiv Himp ::x_';;'_x not
R59361:59365 sf.Equiv Himp ::x_'::='_x not
R59360:59360 sf.Imp <> Z def
R59366:59369 sf.Imp <> ANum constr
R59377:59383 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R59411:59419 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R59441:59446 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R59384:59387 sf.Imp <> BNot constr
R59390:59392 sf.Imp <> BEq constr
R59403:59406 sf.Imp <> ANum constr
R59395:59397 sf.Imp <> AId constr
R59399:59399 sf.Imp <> X def
R59427:59433 sf.Equiv Himp ::x_';;'_x not
R59420:59425 sf.Equiv Himp ::'HAVOC'_x not
R59426:59426 sf.Imp <> X def
R59434:59439 sf.Equiv Himp ::'HAVOC'_x not
R59440:59440 sf.Imp <> Z def
def 59461:59462 Himp p4
R59466:59468 sf.Equiv Himp com ind
R59489:59493 sf.Equiv Himp ::x_';;'_x not
R59476:59481 sf.Equiv Himp ::x_'::='_x not
R59488:59488 sf.Equiv Himp ::x_'::='_x not
R59475:59475 sf.Imp <> X def
R59482:59485 sf.Imp <> ANum constr
R59495:59500 sf.Equiv Himp ::x_'::='_x not
R59507:59507 sf.Equiv Himp ::x_'::='_x not
R59494:59494 sf.Imp <> Z def
R59501:59504 sf.Imp <> ANum constr
prf 59519:59531 Himp p3_p4_inequiv
R59535:59536 Coq.Init.Logic <> :type_scope:'~'_x not
R59537:59542 sf.Equiv Himp cequiv def
R59547:59548 sf.Equiv Himp p4 def
R59544:59545 sf.Equiv Himp p3 def
R59586:59591 sf.Equiv Himp cequiv def
R59594:59595 sf.Equiv Himp p3 def
R59598:59599 sf.Equiv Himp p4 def
R59602:59604 Coq.Init.Logic <> not def
R59627:59634 sf.Maps <> t_update def
R59648:59648 sf.Imp <> X def
R59636:59646 sf.Imp <> empty_state def
R59627:59634 sf.Maps <> t_update def
R59648:59648 sf.Imp <> X def
R59636:59646 sf.Imp <> empty_state def
R59694:59701 sf.Maps <> t_update def
R59729:59729 sf.Imp <> Z def
R59704:59711 sf.Maps <> t_update def
R59724:59724 sf.Imp <> X def
R59694:59701 sf.Maps <> t_update def
R59729:59729 sf.Imp <> Z def
R59704:59711 sf.Maps <> t_update def
R59724:59724 sf.Imp <> X def
R59748:59753 sf.Maps <> beq_id def
R59757:59757 sf.Imp <> Z def
R59755:59755 sf.Imp <> X def
R59748:59753 sf.Maps <> beq_id def
R59757:59757 sf.Imp <> Z def
R59755:59755 sf.Imp <> X def
R59809:59809 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R59837:59840 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R59851:59854 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R59822:59824 sf.Equiv Himp ::x_';;'_x not
R59811:59815 sf.Equiv Himp ::x_'::='_x not
R59810:59810 sf.Imp <> X def
R59816:59819 sf.Imp <> ANum constr
R59826:59830 sf.Equiv Himp ::x_'::='_x not
R59825:59825 sf.Imp <> Z def
R59831:59834 sf.Imp <> ANum constr
R59855:59862 sf.Maps <> t_update def
R59890:59890 sf.Imp <> Z def
R59865:59872 sf.Maps <> t_update def
R59885:59885 sf.Imp <> X def
R59809:59809 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R59837:59840 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R59851:59854 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R59822:59824 sf.Equiv Himp ::x_';;'_x not
R59811:59815 sf.Equiv Himp ::x_'::='_x not
R59810:59810 sf.Imp <> X def
R59816:59819 sf.Imp <> ANum constr
R59826:59830 sf.Equiv Himp ::x_'::='_x not
R59825:59825 sf.Imp <> Z def
R59831:59834 sf.Imp <> ANum constr
R59855:59862 sf.Maps <> t_update def
R59890:59890 sf.Imp <> Z def
R59865:59872 sf.Maps <> t_update def
R59885:59885 sf.Imp <> X def
R59928:59935 sf.Maps <> t_update def
R59948:59948 sf.Imp <> Z def
R59916:59920 sf.Equiv Himp E_Seq constr
R59928:59935 sf.Maps <> t_update def
R59948:59948 sf.Imp <> Z def
R59916:59920 sf.Equiv Himp E_Seq constr
R59964:59968 sf.Equiv Himp E_Ass constr
R59964:59968 sf.Equiv Himp E_Ass constr
R60001:60008 sf.Maps <> t_update def
R60036:60036 sf.Imp <> Z def
R60011:60018 sf.Maps <> t_update def
R60031:60031 sf.Imp <> X def
R59983:59993 sf.Equiv Himp E_WhileLoop constr
R60001:60008 sf.Maps <> t_update def
R60036:60036 sf.Imp <> Z def
R60011:60018 sf.Maps <> t_update def
R60031:60031 sf.Imp <> X def
R59983:59993 sf.Equiv Himp E_WhileLoop constr
R60126:60127 Coq.Init.Logic <> :type_scope:x_'='_x not
R60088:60095 sf.Maps <> t_update def
R60123:60123 sf.Imp <> Z def
R60098:60105 sf.Maps <> t_update def
R60118:60118 sf.Imp <> X def
R60128:60135 sf.Maps <> t_update def
R60178:60178 sf.Imp <> Z def
R60138:60145 sf.Maps <> t_update def
R60173:60173 sf.Imp <> X def
R60148:60155 sf.Maps <> t_update def
R60168:60168 sf.Imp <> Z def
R60126:60127 Coq.Init.Logic <> :type_scope:x_'='_x not
R60088:60095 sf.Maps <> t_update def
R60123:60123 sf.Imp <> Z def
R60098:60105 sf.Maps <> t_update def
R60118:60118 sf.Imp <> X def
R60128:60135 sf.Maps <> t_update def
R60178:60178 sf.Imp <> Z def
R60138:60145 sf.Maps <> t_update def
R60173:60173 sf.Imp <> X def
R60148:60155 sf.Maps <> t_update def
R60168:60168 sf.Imp <> Z def
R60195:60202 sf.Maps <> t_update def
R60211:60235 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R60211:60235 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R60260:60265 sf.Maps <> beq_id def
R60267:60267 sf.Imp <> Z def
R60260:60265 sf.Maps <> beq_id def
R60267:60267 sf.Imp <> Z def
R60329:60336 sf.Maps <> t_update def
R60364:60364 sf.Imp <> X def
R60339:60346 sf.Maps <> t_update def
R60359:60359 sf.Imp <> Z def
R60316:60320 sf.Equiv Himp E_Seq constr
R60329:60336 sf.Maps <> t_update def
R60364:60364 sf.Imp <> X def
R60339:60346 sf.Maps <> t_update def
R60359:60359 sf.Imp <> Z def
R60316:60320 sf.Equiv Himp E_Seq constr
R60376:60382 sf.Equiv Himp E_Havoc constr
R60376:60382 sf.Equiv Himp E_Havoc constr
R60391:60397 sf.Equiv Himp E_Havoc constr
R60391:60397 sf.Equiv Himp E_Havoc constr
R60410:60419 sf.Equiv Himp E_WhileEnd constr
R60410:60419 sf.Equiv Himp E_WhileEnd constr
R60524:60524 Coq.Init.Logic <> :type_scope:x_'='_x not
R60524:60524 Coq.Init.Logic <> :type_scope:x_'='_x not
R60540:60540 Coq.Init.Logic <> :type_scope:x_'='_x not
R60542:60549 sf.Maps <> t_update def
R60593:60593 sf.Imp <> Z def
R60552:60559 sf.Maps <> t_update def
R60588:60588 sf.Imp <> X def
R60562:60569 sf.Maps <> t_update def
R60583:60583 sf.Imp <> X def
R60571:60581 sf.Imp <> empty_state def
R60598:60598 sf.Imp <> Z def
R60540:60540 Coq.Init.Logic <> :type_scope:x_'='_x not
R60542:60549 sf.Maps <> t_update def
R60593:60593 sf.Imp <> Z def
R60552:60559 sf.Maps <> t_update def
R60588:60588 sf.Imp <> X def
R60562:60569 sf.Maps <> t_update def
R60583:60583 sf.Imp <> X def
R60571:60581 sf.Imp <> empty_state def
R60598:60598 sf.Imp <> Z def
R60609:60616 sf.Maps <> t_update def
R60666:60673 sf.Maps <> t_update def
def 60814:60815 Himp p5
R60819:60821 sf.Equiv Himp com ind
R60828:60834 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R60862:60870 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R60878:60883 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R60835:60838 sf.Imp <> BNot constr
R60841:60843 sf.Imp <> BEq constr
R60854:60857 sf.Imp <> ANum constr
R60846:60848 sf.Imp <> AId constr
R60850:60850 sf.Imp <> X def
R60871:60876 sf.Equiv Himp ::'HAVOC'_x not
R60877:60877 sf.Imp <> X def
def 60898:60899 Himp p6
R60903:60905 sf.Equiv Himp com ind
R60913:60917 sf.Equiv Himp ::x_'::='_x not
R60912:60912 sf.Imp <> X def
R60918:60921 sf.Imp <> ANum constr
prf 60936:60946 Himp p5_p6_equiv
R60950:60955 sf.Equiv Himp cequiv def
R60960:60961 sf.Equiv Himp p6 def
R60957:60958 sf.Equiv Himp p5 def
R60999:61004 sf.Equiv Himp cequiv def
R61007:61008 sf.Equiv Himp p5 def
R61011:61012 sf.Equiv Himp p6 def
R61053:61058 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R61086:61089 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R61097:61100 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R61059:61062 sf.Imp <> BNot constr
R61065:61067 sf.Imp <> BEq constr
R61078:61081 sf.Imp <> ANum constr
R61070:61072 sf.Imp <> AId constr
R61074:61074 sf.Imp <> X def
R61090:61095 sf.Equiv Himp ::'HAVOC'_x not
R61096:61096 sf.Imp <> X def
R61053:61058 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R61086:61089 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R61097:61100 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R61059:61062 sf.Imp <> BNot constr
R61065:61067 sf.Imp <> BEq constr
R61078:61081 sf.Imp <> ANum constr
R61070:61072 sf.Imp <> AId constr
R61074:61074 sf.Imp <> X def
R61090:61095 sf.Equiv Himp ::'HAVOC'_x not
R61096:61096 sf.Imp <> X def
R61192:61192 Coq.Init.Logic <> :type_scope:x_'='_x not
R61177:61184 sf.Maps <> t_update def
R61189:61189 sf.Imp <> X def
R61192:61192 Coq.Init.Logic <> :type_scope:x_'='_x not
R61177:61184 sf.Maps <> t_update def
R61189:61189 sf.Imp <> X def
R61213:61220 sf.Maps <> t_update def
R61229:61253 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R61229:61253 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R61282:61287 sf.Maps <> beq_id def
R61289:61289 sf.Imp <> X def
R61282:61287 sf.Maps <> beq_id def
R61289:61289 sf.Imp <> X def
R61315:61330 Coq.Arith.EqNat <> beq_nat_true_iff syndef
R61315:61330 Coq.Arith.EqNat <> beq_nat_true_iff syndef
R61342:61342 Coq.Init.Logic <> :type_scope:x_'='_x not
R61341:61341 sf.Imp <> X def
R61342:61342 Coq.Init.Logic <> :type_scope:x_'='_x not
R61341:61341 sf.Imp <> X def
R61361:61375 sf.Maps <> beq_id_true_iff thm
R61361:61375 sf.Maps <> beq_id_true_iff thm
R61417:61417 Coq.Init.Logic <> :type_scope:x_'='_x not
R61434:61437 Coq.Init.Logic <> :type_scope:x_'='_x not
R61418:61424 Coq.Arith.EqNat <> beq_nat syndef
R61430:61430 sf.Imp <> X def
R61438:61441 Coq.Init.Datatypes <> negb def
R61443:61447 Coq.Init.Datatypes <> false constr
R61417:61417 Coq.Init.Logic <> :type_scope:x_'='_x not
R61434:61437 Coq.Init.Logic <> :type_scope:x_'='_x not
R61418:61424 Coq.Arith.EqNat <> beq_nat syndef
R61430:61430 sf.Imp <> X def
R61438:61441 Coq.Init.Datatypes <> negb def
R61443:61447 Coq.Init.Datatypes <> false constr
R61465:61472 Coq.Bool.Bool <> negb_sym thm
R61465:61472 Coq.Bool.Bool <> negb_sym thm
R61521:61536 Coq.Arith.EqNat <> beq_nat_true_iff syndef
R61521:61536 Coq.Arith.EqNat <> beq_nat_true_iff syndef
R61555:61570 Coq.Arith.EqNat <> beq_nat_true_iff syndef
R61555:61570 Coq.Arith.EqNat <> beq_nat_true_iff syndef
R61641:61645 sf.Equiv Himp E_Ass constr
R61641:61645 sf.Equiv Himp E_Ass constr
R61716:61716 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R61729:61732 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R61736:61739 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R61718:61722 sf.Equiv Himp ::x_'::='_x not
R61717:61717 sf.Imp <> X def
R61723:61726 sf.Imp <> ANum constr
R61716:61716 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R61729:61732 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R61736:61739 sf.Equiv Himp ::x_'/'_x_'\\'_x not
R61718:61722 sf.Equiv Himp ::x_'::='_x not
R61717:61717 sf.Imp <> X def
R61723:61726 sf.Imp <> ANum constr
R61870:61871 Coq.Init.Logic <> :type_scope:x_'='_x not
R61840:61847 sf.Maps <> t_update def
R61867:61867 sf.Imp <> X def
R61850:61857 sf.Maps <> t_update def
R61862:61862 sf.Imp <> X def
R61872:61879 sf.Maps <> t_update def
R61884:61884 sf.Imp <> X def
R61870:61871 Coq.Init.Logic <> :type_scope:x_'='_x not
R61840:61847 sf.Maps <> t_update def
R61867:61867 sf.Imp <> X def
R61850:61857 sf.Maps <> t_update def
R61862:61862 sf.Imp <> X def
R61872:61879 sf.Maps <> t_update def
R61884:61884 sf.Imp <> X def
R61926:61940 sf.Maps <> t_update_shadow thm
R61926:61940 sf.Maps <> t_update_shadow thm
R61980:61984 sf.Equiv Himp E_Ass constr
R61980:61984 sf.Equiv Himp E_Ass constr
R62016:62021 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R62049:62052 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R62060:62063 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R62022:62025 sf.Imp <> BNot constr
R62028:62030 sf.Imp <> BEq constr
R62041:62044 sf.Imp <> ANum constr
R62033:62035 sf.Imp <> AId constr
R62037:62037 sf.Imp <> X def
R62053:62058 sf.Equiv Himp ::'HAVOC'_x not
R62059:62059 sf.Imp <> X def
R62016:62021 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R62049:62052 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R62060:62063 sf.Equiv Himp ::'WHILE'_x_'DO'_x_'END' not
R62022:62025 sf.Imp <> BNot constr
R62028:62030 sf.Imp <> BEq constr
R62041:62044 sf.Imp <> ANum constr
R62033:62035 sf.Imp <> AId constr
R62037:62037 sf.Imp <> X def
R62053:62058 sf.Equiv Himp ::'HAVOC'_x not
R62059:62059 sf.Imp <> X def
R62119:62125 Coq.Arith.EqNat <> beq_nat syndef
R62131:62131 sf.Imp <> X def
R62119:62125 Coq.Arith.EqNat <> beq_nat syndef
R62131:62131 sf.Imp <> X def
R62173:62173 Coq.Init.Logic <> :type_scope:x_'='_x not
R62158:62165 sf.Maps <> t_update def
R62170:62170 sf.Imp <> X def
R62173:62173 Coq.Init.Logic <> :type_scope:x_'='_x not
R62158:62165 sf.Maps <> t_update def
R62170:62170 sf.Imp <> X def
R62194:62201 sf.Maps <> t_update def
R62210:62234 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R62210:62234 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R62263:62268 sf.Maps <> beq_id def
R62270:62270 sf.Imp <> X def
R62263:62268 sf.Maps <> beq_id def
R62270:62270 sf.Imp <> X def
R62307:62322 Coq.Arith.EqNat <> beq_nat_true_iff syndef
R62307:62322 Coq.Arith.EqNat <> beq_nat_true_iff syndef
R62334:62334 Coq.Init.Logic <> :type_scope:x_'='_x not
R62333:62333 sf.Imp <> X def
R62334:62334 Coq.Init.Logic <> :type_scope:x_'='_x not
R62333:62333 sf.Imp <> X def
R62353:62367 sf.Maps <> beq_id_true_iff thm
R62353:62367 sf.Maps <> beq_id_true_iff thm
R62452:62461 sf.Equiv Himp E_WhileEnd constr
R62452:62461 sf.Equiv Himp E_WhileEnd constr
R62525:62532 sf.Maps <> t_update def
R62537:62537 sf.Imp <> X def
R62506:62516 sf.Equiv Himp E_WhileLoop constr
R62525:62532 sf.Maps <> t_update def
R62537:62537 sf.Imp <> X def
R62506:62516 sf.Equiv Himp E_WhileLoop constr
R62579:62585 sf.Equiv Himp E_Havoc constr
R62579:62585 sf.Equiv Himp E_Havoc constr
R62600:62609 sf.Equiv Himp E_WhileEnd constr
R62600:62609 sf.Equiv Himp E_WhileEnd constr
R62638:62641 sf.Equiv Himp <> mod
prf 63335:63365 <> swap_noninterfering_assignments
R63398:63403 Coq.Init.Logic <> :type_scope:x_'->'_x not
R63430:63435 Coq.Init.Logic <> :type_scope:x_'->'_x not
R63462:63467 Coq.Init.Logic <> :type_scope:x_'->'_x not
R63468:63473 sf.Equiv <> cequiv def
R63517:63519 sf.Imp <> ::x_';;'_x not
R63510:63514 sf.Imp <> ::x_'::='_x not
R63508:63509 sf.Equiv <> l2 var
R63515:63516 sf.Equiv <> a2 var
R63522:63526 sf.Imp <> ::x_'::='_x not
R63520:63521 sf.Equiv <> l1 var
R63527:63528 sf.Equiv <> a1 var
R63489:63491 sf.Imp <> ::x_';;'_x not
R63482:63486 sf.Imp <> ::x_'::='_x not
R63480:63481 sf.Equiv <> l1 var
R63487:63488 sf.Equiv <> a1 var
R63494:63498 sf.Imp <> ::x_'::='_x not
R63492:63493 sf.Equiv <> l2 var
R63499:63500 sf.Equiv <> a2 var
R63436:63455 sf.Equiv <> var_not_used_in_aexp ind
R63460:63461 sf.Equiv <> a1 var
R63457:63458 sf.Equiv <> l2 var
R63404:63423 sf.Equiv <> var_not_used_in_aexp ind
R63428:63429 sf.Equiv <> a2 var
R63425:63426 sf.Equiv <> l1 var
R63392:63395 Coq.Init.Logic <> :type_scope:x_'<>'_x not
R63390:63391 sf.Equiv <> l1 var
R63396:63397 sf.Equiv <> l2 var
R63546:63551 sf.Equiv <> cequiv def
R63729:63730 Coq.Init.Logic <> :type_scope:x_'='_x not
R63645:63652 sf.Maps <> t_update def
R63689:63693 sf.Imp <> aeval def
R63696:63703 sf.Maps <> t_update def
R63712:63716 sf.Imp <> aeval def
R63655:63662 sf.Maps <> t_update def
R63671:63675 sf.Imp <> aeval def
R63731:63738 sf.Maps <> t_update def
R63775:63779 sf.Imp <> aeval def
R63782:63789 sf.Maps <> t_update def
R63798:63802 sf.Imp <> aeval def
R63741:63748 sf.Maps <> t_update def
R63757:63761 sf.Imp <> aeval def
R63729:63730 Coq.Init.Logic <> :type_scope:x_'='_x not
R63645:63652 sf.Maps <> t_update def
R63689:63693 sf.Imp <> aeval def
R63696:63703 sf.Maps <> t_update def
R63712:63716 sf.Imp <> aeval def
R63655:63662 sf.Maps <> t_update def
R63671:63675 sf.Imp <> aeval def
R63731:63738 sf.Maps <> t_update def
R63775:63779 sf.Imp <> aeval def
R63782:63789 sf.Maps <> t_update def
R63798:63802 sf.Imp <> aeval def
R63741:63748 sf.Maps <> t_update def
R63757:63761 sf.Imp <> aeval def
R63833:63833 Coq.Init.Logic <> :type_scope:x_'='_x not
R63873:63874 Coq.Init.Logic <> :type_scope:x_'='_x not
R63834:63838 sf.Imp <> aeval def
R63841:63848 sf.Maps <> t_update def
R63857:63861 sf.Imp <> aeval def
R63875:63879 sf.Imp <> aeval def
R63833:63833 Coq.Init.Logic <> :type_scope:x_'='_x not
R63873:63874 Coq.Init.Logic <> :type_scope:x_'='_x not
R63834:63838 sf.Imp <> aeval def
R63841:63848 sf.Maps <> t_update def
R63857:63861 sf.Imp <> aeval def
R63875:63879 sf.Imp <> aeval def
R63895:63909 sf.Equiv <> aeval_weakening thm
R63895:63909 sf.Equiv <> aeval_weakening thm
R63952:63952 Coq.Init.Logic <> :type_scope:x_'='_x not
R63992:63993 Coq.Init.Logic <> :type_scope:x_'='_x not
R63953:63957 sf.Imp <> aeval def
R63960:63967 sf.Maps <> t_update def
R63976:63980 sf.Imp <> aeval def
R63994:63998 sf.Imp <> aeval def
R63952:63952 Coq.Init.Logic <> :type_scope:x_'='_x not
R63992:63993 Coq.Init.Logic <> :type_scope:x_'='_x not
R63953:63957 sf.Imp <> aeval def
R63960:63967 sf.Maps <> t_update def
R63976:63980 sf.Imp <> aeval def
R63994:63998 sf.Imp <> aeval def
R64014:64028 sf.Equiv <> aeval_weakening thm
R64014:64028 sf.Equiv <> aeval_weakening thm
R64069:64076 sf.Maps <> t_update def
R64085:64109 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R64085:64109 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R64137:64142 sf.Maps <> beq_id def
R64137:64142 sf.Maps <> beq_id def
R64175:64180 sf.Maps <> beq_id def
R64175:64180 sf.Maps <> beq_id def
R64206:64206 Coq.Init.Logic <> :type_scope:x_'='_x not
R64206:64206 Coq.Init.Logic <> :type_scope:x_'='_x not
R64224:64238 sf.Maps <> beq_id_true_iff thm
R64224:64238 sf.Maps <> beq_id_true_iff thm
R64296:64310 sf.Maps <> beq_id_true_iff thm
R64296:64310 sf.Maps <> beq_id_true_iff thm
R64386:64393 sf.Maps <> t_update def
R64402:64406 sf.Imp <> aeval def
R64374:64378 sf.Imp <> E_Seq constr
R64386:64393 sf.Maps <> t_update def
R64402:64406 sf.Imp <> aeval def
R64374:64378 sf.Imp <> E_Seq constr
R64423:64427 sf.Imp <> E_Ass constr
R64423:64427 sf.Imp <> E_Ass constr
R64442:64446 sf.Imp <> E_Ass constr
R64442:64446 sf.Imp <> E_Ass constr
R64616:64617 Coq.Init.Logic <> :type_scope:x_'='_x not
R64532:64539 sf.Maps <> t_update def
R64576:64580 sf.Imp <> aeval def
R64583:64590 sf.Maps <> t_update def
R64599:64603 sf.Imp <> aeval def
R64542:64549 sf.Maps <> t_update def
R64558:64562 sf.Imp <> aeval def
R64618:64625 sf.Maps <> t_update def
R64662:64666 sf.Imp <> aeval def
R64669:64676 sf.Maps <> t_update def
R64685:64689 sf.Imp <> aeval def
R64628:64635 sf.Maps <> t_update def
R64644:64648 sf.Imp <> aeval def
R64616:64617 Coq.Init.Logic <> :type_scope:x_'='_x not
R64532:64539 sf.Maps <> t_update def
R64576:64580 sf.Imp <> aeval def
R64583:64590 sf.Maps <> t_update def
R64599:64603 sf.Imp <> aeval def
R64542:64549 sf.Maps <> t_update def
R64558:64562 sf.Imp <> aeval def
R64618:64625 sf.Maps <> t_update def
R64662:64666 sf.Imp <> aeval def
R64669:64676 sf.Maps <> t_update def
R64685:64689 sf.Imp <> aeval def
R64628:64635 sf.Maps <> t_update def
R64644:64648 sf.Imp <> aeval def
R64720:64720 Coq.Init.Logic <> :type_scope:x_'='_x not
R64760:64761 Coq.Init.Logic <> :type_scope:x_'='_x not
R64721:64725 sf.Imp <> aeval def
R64728:64735 sf.Maps <> t_update def
R64744:64748 sf.Imp <> aeval def
R64762:64766 sf.Imp <> aeval def
R64720:64720 Coq.Init.Logic <> :type_scope:x_'='_x not
R64760:64761 Coq.Init.Logic <> :type_scope:x_'='_x not
R64721:64725 sf.Imp <> aeval def
R64728:64735 sf.Maps <> t_update def
R64744:64748 sf.Imp <> aeval def
R64762:64766 sf.Imp <> aeval def
R64782:64796 sf.Equiv <> aeval_weakening thm
R64782:64796 sf.Equiv <> aeval_weakening thm
R64839:64839 Coq.Init.Logic <> :type_scope:x_'='_x not
R64879:64880 Coq.Init.Logic <> :type_scope:x_'='_x not
R64840:64844 sf.Imp <> aeval def
R64847:64854 sf.Maps <> t_update def
R64863:64867 sf.Imp <> aeval def
R64881:64885 sf.Imp <> aeval def
R64839:64839 Coq.Init.Logic <> :type_scope:x_'='_x not
R64879:64880 Coq.Init.Logic <> :type_scope:x_'='_x not
R64840:64844 sf.Imp <> aeval def
R64847:64854 sf.Maps <> t_update def
R64863:64867 sf.Imp <> aeval def
R64881:64885 sf.Imp <> aeval def
R64901:64915 sf.Equiv <> aeval_weakening thm
R64901:64915 sf.Equiv <> aeval_weakening thm
R64956:64963 sf.Maps <> t_update def
R64972:64996 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R64972:64996 Coq.Logic.FunctionalExtensionality <> functional_extensionality thm
R65024:65029 sf.Maps <> beq_id def
R65024:65029 sf.Maps <> beq_id def
R65062:65067 sf.Maps <> beq_id def
R65062:65067 sf.Maps <> beq_id def
R65093:65093 Coq.Init.Logic <> :type_scope:x_'='_x not
R65093:65093 Coq.Init.Logic <> :type_scope:x_'='_x not
R65111:65125 sf.Maps <> beq_id_true_iff thm
R65111:65125 sf.Maps <> beq_id_true_iff thm
R65183:65197 sf.Maps <> beq_id_true_iff thm
R65183:65197 sf.Maps <> beq_id_true_iff thm
R65275:65282 sf.Maps <> t_update def
R65291:65295 sf.Imp <> aeval def
R65263:65267 sf.Imp <> E_Seq constr
R65275:65282 sf.Maps <> t_update def
R65291:65295 sf.Imp <> aeval def
R65263:65267 sf.Imp <> E_Seq constr
R65312:65316 sf.Imp <> E_Ass constr
R65312:65316 sf.Imp <> E_Ass constr
R65331:65335 sf.Imp <> E_Ass constr
R65331:65335 sf.Imp <> E_Ass constr
def 65817:65823 <> capprox
R65834:65836 sf.Imp <> com ind
R65866:65870 sf.Imp <> state def
R65890:65893 Coq.Init.Logic <> :type_scope:x_'->'_x not
R65896:65898 sf.Imp <> ::x_'/'_x_'\\'_x not
R65901:65904 sf.Imp <> ::x_'/'_x_'\\'_x not
R65894:65895 sf.Equiv <> c2 var
R65899:65900 sf.Equiv <> st var
R65905:65907 sf.Equiv <> st' var
R65878:65880 sf.Imp <> ::x_'/'_x_'\\'_x not
R65883:65886 sf.Imp <> ::x_'/'_x_'\\'_x not
R65876:65877 sf.Equiv <> c1 var
R65881:65882 sf.Equiv <> st var
R65887:65889 sf.Equiv <> st' var
def 66304:66305 <> c3
R66309:66311 sf.Imp <> com ind
R66370:66373 sf.Imp <> ::x_'::='_x not
R66380:66380 sf.Imp <> ::x_'::='_x not
R66369:66369 sf.Imp <> X def
R66374:66377 sf.Imp <> ANum constr
def 66395:66396 <> c4
R66400:66402 sf.Imp <> com ind
R66461:66464 sf.Imp <> ::x_'::='_x not
R66471:66471 sf.Imp <> ::x_'::='_x not
R66460:66460 sf.Imp <> X def
R66465:66468 sf.Imp <> ANum constr
prf 66484:66498 <> c3_c4_different
R66517:66520 Coq.Init.Logic <> :type_scope:x_'/\'_x not
R66502:66503 Coq.Init.Logic <> :type_scope:'~'_x not
R66504:66510 sf.Equiv <> capprox def
R66515:66516 sf.Equiv <> c4 def
R66512:66513 sf.Equiv <> c3 def
R66521:66522 Coq.Init.Logic <> :type_scope:'~'_x not
R66523:66529 sf.Equiv <> capprox def
R66534:66535 sf.Equiv <> c3 def
R66531:66532 sf.Equiv <> c4 def
R66573:66579 sf.Equiv <> capprox def
R66582:66583 sf.Equiv <> c3 def
R66586:66587 sf.Equiv <> c4 def
R66590:66592 Coq.Init.Logic <> not def
R66681:66684 Coq.Init.Logic <> :type_scope:x_'->'_x not
R66685:66685 sf.Imp <> ::x_'/'_x_'\\'_x not
R66698:66700 sf.Imp <> ::x_'/'_x_'\\'_x not
R66712:66716 sf.Imp <> ::x_'/'_x_'\\'_x not
R66741:66741 sf.Imp <> ::x_'/'_x_'\\'_x not
R66687:66691 sf.Imp <> ::x_'::='_x not
R66686:66686 sf.Imp <> X def
R66692:66695 sf.Imp <> ANum constr
R66701:66711 sf.Imp <> empty_state def
R66717:66724 sf.Maps <> t_update def
R66738:66738 sf.Imp <> X def
R66726:66736 sf.Imp <> empty_state def
R66623:66623 sf.Imp <> ::x_'/'_x_'\\'_x not
R66636:66639 sf.Imp <> ::x_'/'_x_'\\'_x not
R66651:66655 sf.Imp <> ::x_'/'_x_'\\'_x not
R66680:66680 sf.Imp <> ::x_'/'_x_'\\'_x not
R66625:66629 sf.Imp <> ::x_'::='_x not
R66624:66624 sf.Imp <> X def
R66630:66633 sf.Imp <> ANum constr
R66640:66650 sf.Imp <> empty_state def
R66656:66663 sf.Maps <> t_update def
R66677:66677 sf.Imp <> X def
R66665:66675 sf.Imp <> empty_state def
R66681:66684 Coq.Init.Logic <> :type_scope:x_'->'_x not
R66685:66685 sf.Imp <> ::x_'/'_x_'\\'_x not
R66698:66700 sf.Imp <> ::x_'/'_x_'\\'_x not
R66712:66716 sf.Imp <> ::x_'/'_x_'\\'_x not
R66741:66741 sf.Imp <> ::x_'/'_x_'\\'_x not
R66687:66691 sf.Imp <> ::x_'::='_x not
R66686:66686 sf.Imp <> X def
R66692:66695 sf.Imp <> ANum constr
R66701:66711 sf.Imp <> empty_state def
R66717:66724 sf.Maps <> t_update def
R66738:66738 sf.Imp <> X def
R66726:66736 sf.Imp <> empty_state def
R66623:66623 sf.Imp <> ::x_'/'_x_'\\'_x not
R66636:66639 sf.Imp <> ::x_'/'_x_'\\'_x not
R66651:66655 sf.Imp <> ::x_'/'_x_'\\'_x not
R66680:66680 sf.Imp <> ::x_'/'_x_'\\'_x not
R66625:66629 sf.Imp <> ::x_'::='_x not
R66624:66624 sf.Imp <> X def
R66630:66633 sf.Imp <> ANum constr
R66640:66650 sf.Imp <> empty_state def
R66656:66663 sf.Maps <> t_update def
R66677:66677 sf.Imp <> X def
R66665:66675 sf.Imp <> empty_state def
R66762:66762 sf.Imp <> ::x_'/'_x_'\\'_x not
R66775:66778 sf.Imp <> ::x_'/'_x_'\\'_x not
R66790:66793 sf.Imp <> ::x_'/'_x_'\\'_x not
R66764:66768 sf.Imp <> ::x_'::='_x not
R66763:66763 sf.Imp <> X def
R66769:66772 sf.Imp <> ANum constr
R66779:66789 sf.Imp <> empty_state def
R66794:66801 sf.Maps <> t_update def
R66815:66815 sf.Imp <> X def
R66803:66813 sf.Imp <> empty_state def
R66762:66762 sf.Imp <> ::x_'/'_x_'\\'_x not
R66775:66778 sf.Imp <> ::x_'/'_x_'\\'_x not
R66790:66793 sf.Imp <> ::x_'/'_x_'\\'_x not
R66764:66768 sf.Imp <> ::x_'::='_x not
R66763:66763 sf.Imp <> X def
R66769:66772 sf.Imp <> ANum constr
R66779:66789 sf.Imp <> empty_state def
R66794:66801 sf.Maps <> t_update def
R66815:66815 sf.Imp <> X def
R66803:66813 sf.Imp <> empty_state def
R66837:66841 sf.Imp <> E_Ass constr
R66837:66841 sf.Imp <> E_Ass constr
R66901:66901 Coq.Init.Logic <> :type_scope:x_'='_x not
R66903:66910 sf.Maps <> t_update def
R66924:66924 sf.Imp <> X def
R66912:66922 sf.Imp <> empty_state def
R66929:66929 sf.Imp <> X def
R66901:66901 Coq.Init.Logic <> :type_scope:x_'='_x not
R66903:66910 sf.Maps <> t_update def
R66924:66924 sf.Imp <> X def
R66912:66922 sf.Imp <> empty_state def
R66929:66929 sf.Imp <> X def
R66946:66953 sf.Maps <> t_update def
R66995:67002 sf.Maps <> t_update def
R67117:67120 Coq.Init.Logic <> :type_scope:x_'->'_x not
R67121:67121 sf.Imp <> ::x_'/'_x_'\\'_x not
R67134:67136 sf.Imp <> ::x_'/'_x_'\\'_x not
R67148:67152 sf.Imp <> ::x_'/'_x_'\\'_x not
R67177:67177 sf.Imp <> ::x_'/'_x_'\\'_x not
R67123:67127 sf.Imp <> ::x_'::='_x not
R67122:67122 sf.Imp <> X def
R67128:67131 sf.Imp <> ANum constr
R67137:67147 sf.Imp <> empty_state def
R67153:67160 sf.Maps <> t_update def
R67174:67174 sf.Imp <> X def
R67162:67172 sf.Imp <> empty_state def
R67059:67059 sf.Imp <> ::x_'/'_x_'\\'_x not
R67072:67075 sf.Imp <> ::x_'/'_x_'\\'_x not
R67087:67091 sf.Imp <> ::x_'/'_x_'\\'_x not
R67116:67116 sf.Imp <> ::x_'/'_x_'\\'_x not
R67061:67065 sf.Imp <> ::x_'::='_x not
R67060:67060 sf.Imp <> X def
R67066:67069 sf.Imp <> ANum constr
R67076:67086 sf.Imp <> empty_state def
R67092:67099 sf.Maps <> t_update def
R67113:67113 sf.Imp <> X def
R67101:67111 sf.Imp <> empty_state def
R67117:67120 Coq.Init.Logic <> :type_scope:x_'->'_x not
R67121:67121 sf.Imp <> ::x_'/'_x_'\\'_x not
R67134:67136 sf.Imp <> ::x_'/'_x_'\\'_x not
R67148:67152 sf.Imp <> ::x_'/'_x_'\\'_x not
R67177:67177 sf.Imp <> ::x_'/'_x_'\\'_x not
R67123:67127 sf.Imp <> ::x_'::='_x not
R67122:67122 sf.Imp <> X def
R67128:67131 sf.Imp <> ANum constr
R67137:67147 sf.Imp <> empty_state def
R67153:67160 sf.Maps <> t_update def
R67174:67174 sf.Imp <> X def
R67162:67172 sf.Imp <> empty_state def
R67059:67059 sf.Imp <> ::x_'/'_x_'\\'_x not
R67072:67075 sf.Imp <> ::x_'/'_x_'\\'_x not
R67087:67091 sf.Imp <> ::x_'/'_x_'\\'_x not
R67116:67116 sf.Imp <> ::x_'/'_x_'\\'_x not
R67061:67065 sf.Imp <> ::x_'::='_x not
R67060:67060 sf.Imp <> X def
R67066:67069 sf.Imp <> ANum constr
R67076:67086 sf.Imp <> empty_state def
R67092:67099 sf.Maps <> t_update def
R67113:67113 sf.Imp <> X def
R67101:67111 sf.Imp <> empty_state def
R67198:67198 sf.Imp <> ::x_'/'_x_'\\'_x not
R67211:67214 sf.Imp <> ::x_'/'_x_'\\'_x not
R67226:67229 sf.Imp <> ::x_'/'_x_'\\'_x not
R67200:67204 sf.Imp <> ::x_'::='_x not
R67199:67199 sf.Imp <> X def
R67205:67208 sf.Imp <> ANum constr
R67215:67225 sf.Imp <> empty_state def
R67230:67237 sf.Maps <> t_update def
R67251:67251 sf.Imp <> X def
R67239:67249 sf.Imp <> empty_state def
R67198:67198 sf.Imp <> ::x_'/'_x_'\\'_x not
R67211:67214 sf.Imp <> ::x_'/'_x_'\\'_x not
R67226:67229 sf.Imp <> ::x_'/'_x_'\\'_x not
R67200:67204 sf.Imp <> ::x_'::='_x not
R67199:67199 sf.Imp <> X def
R67205:67208 sf.Imp <> ANum constr
R67215:67225 sf.Imp <> empty_state def
R67230:67237 sf.Maps <> t_update def
R67251:67251 sf.Imp <> X def
R67239:67249 sf.Imp <> empty_state def
R67273:67277 sf.Imp <> E_Ass constr
R67273:67277 sf.Imp <> E_Ass constr
R67337:67337 Coq.Init.Logic <> :type_scope:x_'='_x not
R67339:67346 sf.Maps <> t_update def
R67360:67360 sf.Imp <> X def
R67348:67358 sf.Imp <> empty_state def
R67365:67365 sf.Imp <> X def
R67337:67337 Coq.Init.Logic <> :type_scope:x_'='_x not
R67339:67346 sf.Maps <> t_update def
R67360:67360 sf.Imp <> X def
R67348:67358 sf.Imp <> empty_state def
R67365:67365 sf.Imp <> X def
R67382:67389 sf.Maps <> t_update def
R67429:67436 sf.Maps <> t_update def
def 67557:67560 <> cmin
R67564:67566 sf.Imp <> com ind
R67628:67633 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R67639:67642 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R67647:67650 sf.Imp <> ::'WHILE'_x_'DO'_x_'END' not
R67634:67638 sf.Imp <> BTrue constr
R67643:67646 sf.Imp <> ::'SKIP' not
prf 67664:67675 <> cmin_minimal
R67689:67695 sf.Equiv <> capprox def
R67702:67702 sf.Equiv <> c var
R67697:67700 sf.Equiv <> cmin def
R67740:67746 sf.Equiv <> capprox def
R67749:67752 sf.Equiv <> cmin def
R67773:67777 Coq.Init.Logic <> False ind
R67773:67777 Coq.Init.Logic <> False ind
R67792:67809 sf.Equiv <> WHILE_true_nonterm thm
R67817:67820 sf.Imp <> ::'SKIP' not
R67811:67815 sf.Imp <> BTrue constr
R67792:67809 sf.Equiv <> WHILE_true_nonterm thm
R67817:67820 sf.Imp <> ::'SKIP' not
R67811:67815 sf.Imp <> BTrue constr
R67842:67847 sf.Equiv <> bequiv def
