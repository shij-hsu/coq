(* chap 15.1 Proving Eveness *)

Inductive isEven  : nat->Prop :=
| Even_O: isEven O
| Even_SS:forall n, isEven n->isEven (S (S n)).

Ltac prove_even:= repeat constructor.
Theorem even_256 : isEven 256.
  prove_even. Qed.
Theorem lt_2_1024 : 2<256.  (* it will be very slow *)
  prove_even. Qed.

Print lt_2_1024.
Print even_256.

Require Import MoreSpecif.

Print partial.
Local Open Scope partial_scope.
Definition check_even: forall n:nat, [isEven n].
  Hint Constructors isEven.
  refine (fix F (n:nat):[isEven n]:=
            match n with
            | 0=>Yes
            | 1=>No
            | S (S n')=>Reduce (F n')
            end); auto.
Defined.

Definition partialOut (P:Prop) (x:[P]) :=
match x return (match x with
                | Proved _ =>P
                | Uncertain =>True
                end) with
| Proved pf => pf
| Uncertain => I
end.


Ltac prove_even_reflective:=
  match goal with
  | [ |- isEven ?N ]=> exact (partialOut (check_even N))
  end.

Theorem even_256' : isEven 256.
  repeat constructor. Qed.

Print even_256'.